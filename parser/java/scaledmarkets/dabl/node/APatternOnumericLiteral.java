/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.node;

import java.util.*;
import scaledmarkets.dabl.analysis.*;

@SuppressWarnings("nls")
public final class APatternOnumericLiteral extends POnumericLiteral
{
    private POsign _osign_;
    private POnumSlot _magnitude_;
    private final LinkedList<POnumSlot> _mantissa_ = new LinkedList<POnumSlot>();

    public APatternOnumericLiteral()
    {
        // Constructor
    }

    public APatternOnumericLiteral(
        @SuppressWarnings("hiding") POsign _osign_,
        @SuppressWarnings("hiding") POnumSlot _magnitude_,
        @SuppressWarnings("hiding") List<?> _mantissa_)
    {
        // Constructor
        setOsign(_osign_);

        setMagnitude(_magnitude_);

        setMantissa(_mantissa_);

    }

    @Override
    public Object clone()
    {
        return new APatternOnumericLiteral(
            cloneNode(this._osign_),
            cloneNode(this._magnitude_),
            cloneList(this._mantissa_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPatternOnumericLiteral(this);
    }

    public POsign getOsign()
    {
        return this._osign_;
    }

    public void setOsign(POsign node)
    {
        if(this._osign_ != null)
        {
            this._osign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._osign_ = node;
    }

    public POnumSlot getMagnitude()
    {
        return this._magnitude_;
    }

    public void setMagnitude(POnumSlot node)
    {
        if(this._magnitude_ != null)
        {
            this._magnitude_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._magnitude_ = node;
    }

    public LinkedList<POnumSlot> getMantissa()
    {
        return this._mantissa_;
    }

    public void setMantissa(List<?> list)
    {
        for(POnumSlot e : this._mantissa_)
        {
            e.parent(null);
        }
        this._mantissa_.clear();

        for(Object obj_e : list)
        {
            POnumSlot e = (POnumSlot) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._mantissa_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._osign_)
            + toString(this._magnitude_)
            + toString(this._mantissa_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._osign_ == child)
        {
            this._osign_ = null;
            return;
        }

        if(this._magnitude_ == child)
        {
            this._magnitude_ = null;
            return;
        }

        if(this._mantissa_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._osign_ == oldChild)
        {
            setOsign((POsign) newChild);
            return;
        }

        if(this._magnitude_ == oldChild)
        {
            setMagnitude((POnumSlot) newChild);
            return;
        }

        for(ListIterator<POnumSlot> i = this._mantissa_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POnumSlot) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
