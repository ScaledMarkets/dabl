/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.analysis;

import scaledmarkets.dabl.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAOnamespace(AOnamespace node);
    void caseAOidRef(AOidRef node);
    void caseAImportOnamespaceElt(AImportOnamespaceElt node);
    void caseATypographicOnamespaceElt(ATypographicOnamespaceElt node);
    void caseAArtifactOnamespaceElt(AArtifactOnamespaceElt node);
    void caseARepoOnamespaceElt(ARepoOnamespaceElt node);
    void caseAFilesOnamespaceElt(AFilesOnamespaceElt node);
    void caseAFunctionOnamespaceElt(AFunctionOnamespaceElt node);
    void caseATaskOnamespaceElt(ATaskOnamespaceElt node);
    void caseATranslationOnamespaceElt(ATranslationOnamespaceElt node);
    void caseATabDeclOtypographicDeclaration(ATabDeclOtypographicDeclaration node);
    void caseAOartifactDeclaration(AOartifactDeclaration node);
    void caseARangeOrangeSpec(ARangeOrangeSpec node);
    void caseAOneOrangeSpec(AOneOrangeSpec node);
    void caseAAllOrangeSpec(AAllOrangeSpec node);
    void caseAAssumeOcompatibilitySpec(AAssumeOcompatibilitySpec node);
    void caseATestedOcompatibilitySpec(ATestedOcompatibilitySpec node);
    void caseAOrepoDeclaration(AOrepoDeclaration node);
    void caseASpecifiedOstringValueOpt(ASpecifiedOstringValueOpt node);
    void caseAUnspecifiedOstringValueOpt(AUnspecifiedOstringValueOpt node);
    void caseAOfilesDeclaration(AOfilesDeclaration node);
    void caseALatestCompatibleOfilePreference(ALatestCompatibleOfilePreference node);
    void caseALatestTestedOfilePreference(ALatestTestedOfilePreference node);
    void caseAVersionOfilePreference(AVersionOfilePreference node);
    void caseANoPreferenceOfilePreference(ANoPreferenceOfilePreference node);
    void caseAIncludeOfilesetOperation(AIncludeOfilesetOperation node);
    void caseAExcludeOfilesetOperation(AExcludeOfilesetOperation node);
    void caseAOfunctionDeclaration(AOfunctionDeclaration node);
    void caseAStringOtypeSpec(AStringOtypeSpec node);
    void caseANumericOtypeSpec(ANumericOtypeSpec node);
    void caseALogicalOtypeSpec(ALogicalOtypeSpec node);
    void caseAArrayOtypeSpec(AArrayOtypeSpec node);
    void caseASeparatorOtypeSpec(ASeparatorOtypeSpec node);
    void caseACommaOtypeSpecSeparator(ACommaOtypeSpecSeparator node);
    void caseAPrepositionOtypeSpecSeparator(APrepositionOtypeSpecSeparator node);
    void caseAFromOpreposition(AFromOpreposition node);
    void caseAToOpreposition(AToOpreposition node);
    void caseAInOpreposition(AInOpreposition node);
    void caseAForOpreposition(AForOpreposition node);
    void caseAWithOpreposition(AWithOpreposition node);
    void caseAWhenOpreposition(AWhenOpreposition node);
    void caseAOnOpreposition(AOnOpreposition node);
    void caseAOfOpreposition(AOfOpreposition node);
    void caseAThanOpreposition(AThanOpreposition node);
    void caseAOtaskDeclaration(AOtaskDeclaration node);
    void caseASpecifiedOtimeout(ASpecifiedOtimeout node);
    void caseAUnspecifiedOtimeout(AUnspecifiedOtimeout node);
    void caseAMsOtimeUnit(AMsOtimeUnit node);
    void caseASecOtimeUnit(ASecOtimeUnit node);
    void caseAMinOtimeUnit(AMinOtimeUnit node);
    void caseAHoursOtimeUnit(AHoursOtimeUnit node);
    void caseADaysOtimeUnit(ADaysOtimeUnit node);
    void caseAPublicOscope(APublicOscope node);
    void caseAPrivateOscope(APrivateOscope node);
    void caseAOpenOopen(AOpenOopen node);
    void caseAClosedOopen(AClosedOopen node);
    void caseANamedOnamedArtifactSet(ANamedOnamedArtifactSet node);
    void caseAAnonymousOnamedArtifactSet(AAnonymousOnamedArtifactSet node);
    void caseARefOnamedArtifactSet(ARefOnamedArtifactSet node);
    void caseAInlineOartifactSpec(AInlineOartifactSpec node);
    void caseAFilesRefOartifactSpec(AFilesRefOartifactSpec node);
    void caseARemoteOartifactSet(ARemoteOartifactSet node);
    void caseALocalOartifactSet(ALocalOartifactSet node);
    void caseAFuncCallOprocStmt(AFuncCallOprocStmt node);
    void caseAIfErrorOprocStmt(AIfErrorOprocStmt node);
    void caseATargetOtargetOpt(ATargetOtargetOpt node);
    void caseANoTargetOtargetOpt(ANoTargetOtargetOpt node);
    void caseAOtranslationDeclaration(AOtranslationDeclaration node);
    void caseAFilenameOtranslationStmt(AFilenameOtranslationStmt node);
    void caseASucceededOsuccessExpr(ASucceededOsuccessExpr node);
    void caseAFailedOsuccessExpr(AFailedOsuccessExpr node);
    void caseANewerThanOageExpr(ANewerThanOageExpr node);
    void caseAOlderThanOageExpr(AOlderThanOageExpr node);
    void caseANegationOunaryOp(ANegationOunaryOp node);
    void caseAPlusObinaryOp(APlusObinaryOp node);
    void caseAMinusObinaryOp(AMinusObinaryOp node);
    void caseAMultiplyObinaryOp(AMultiplyObinaryOp node);
    void caseADivideObinaryOp(ADivideObinaryOp node);
    void caseAAndObinaryOp(AAndObinaryOp node);
    void caseAOrObinaryOp(AOrObinaryOp node);
    void caseAGtObinaryOp(AGtObinaryOp node);
    void caseALtObinaryOp(ALtObinaryOp node);
    void caseAGeObinaryOp(AGeObinaryOp node);
    void caseALeObinaryOp(ALeObinaryOp node);
    void caseAEqObinaryOp(AEqObinaryOp node);
    void caseANeObinaryOp(ANeObinaryOp node);
    void caseALiteralOexpr(ALiteralOexpr node);
    void caseAVariableOexpr(AVariableOexpr node);
    void caseAUnaryOexpr(AUnaryOexpr node);
    void caseABinaryOexpr(ABinaryOexpr node);
    void caseASuccessOexpr(ASuccessOexpr node);
    void caseAAgeOexpr(AAgeOexpr node);
    void caseAArrayEltOexpr(AArrayEltOexpr node);
    void caseALogicOliteral(ALogicOliteral node);
    void caseAStringOliteral(AStringOliteral node);
    void caseANumericOliteral(ANumericOliteral node);
    void caseAOvariable(AOvariable node);
    void caseATrueOlogicLiteral(ATrueOlogicLiteral node);
    void caseAFalseOlogicLiteral(AFalseOlogicLiteral node);
    void caseAStringOstringLiteral(AStringOstringLiteral node);
    void caseAString2OstringLiteral(AString2OstringLiteral node);
    void caseAStaticStringExprOstringLiteral(AStaticStringExprOstringLiteral node);
    void caseAIntOnumericLiteral(AIntOnumericLiteral node);
    void caseAPatternOnumericLiteral(APatternOnumericLiteral node);
    void caseANumOnumSlot(ANumOnumSlot node);
    void caseAWildcardOnumSlot(AWildcardOnumSlot node);
    void caseAPositiveOsign(APositiveOsign node);
    void caseANegativeOsign(ANegativeOsign node);

    void caseTTabChar(TTabChar node);
    void caseTNlChar(TNlChar node);
    void caseTCommaChar(TCommaChar node);
    void caseTPlus(TPlus node);
    void caseTDash(TDash node);
    void caseTAsterisk(TAsterisk node);
    void caseTDiv(TDiv node);
    void caseTGt(TGt node);
    void caseTLt(TLt node);
    void caseTGe(TGe node);
    void caseTLe(TLe node);
    void caseTEq(TEq node);
    void caseTNe(TNe node);
    void caseTGets(TGets node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTDotdot(TDotdot node);
    void caseTQmark(TQmark node);
    void caseTDef(TDef node);
    void caseTLeftParen(TLeftParen node);
    void caseTRightParen(TRightParen node);
    void caseTLeftCur(TLeftCur node);
    void caseTRightCur(TRightCur node);
    void caseTLeftBrack(TLeftBrack node);
    void caseTRightBrack(TRightBrack node);
    void caseTPerChar(TPerChar node);
    void caseTCaret(TCaret node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTIn(TIn node);
    void caseTFor(TFor node);
    void caseTWith(TWith node);
    void caseTWhen(TWhen node);
    void caseTOn(TOn node);
    void caseTOf(TOf node);
    void caseTThan(TThan node);
    void caseTNamespace(TNamespace node);
    void caseTImport(TImport node);
    void caseTTabKeyword(TTabKeyword node);
    void caseTEquivalent(TEquivalent node);
    void caseTSpacesKeyword(TSpacesKeyword node);
    void caseTArtifact(TArtifact node);
    void caseTTask(TTask node);
    void caseTPublic(TPublic node);
    void caseTRepo(TRepo node);
    void caseTType(TType node);
    void caseTGit(TGit node);
    void caseTFiles(TFiles node);
    void caseTShell(TShell node);
    void caseTTranslation(TTranslation node);
    void caseTTranslate(TTranslate node);
    void caseTFilename(TFilename node);
    void caseTPrefer(TPrefer node);
    void caseTLatest(TLatest node);
    void caseTAssume(TAssume node);
    void caseTCompatible(TCompatible node);
    void caseTTested(TTested node);
    void caseTFunction(TFunction node);
    void caseTBinds(TBinds node);
    void caseTMethod(TMethod node);
    void caseTReturns(TReturns node);
    void caseTSucceeded(TSucceeded node);
    void caseTFailed(TFailed node);
    void caseTNewer(TNewer node);
    void caseTOlder(TOlder node);
    void caseTInputs(TInputs node);
    void caseTOutputs(TOutputs node);
    void caseTPathKeyword(TPathKeyword node);
    void caseTScheme(TScheme node);
    void caseTIf(TIf node);
    void caseTEnd(TEnd node);
    void caseTError(TError node);
    void caseTStringKeyword(TStringKeyword node);
    void caseTNumericKeyword(TNumericKeyword node);
    void caseTLogicalKeyword(TLogicalKeyword node);
    void caseTNotKeyword(TNotKeyword node);
    void caseTAndKeyword(TAndKeyword node);
    void caseTOrKeyword(TOrKeyword node);
    void caseTInclude(TInclude node);
    void caseTExclude(TExclude node);
    void caseTTrueKeyword(TTrueKeyword node);
    void caseTFalseKeyword(TFalseKeyword node);
    void caseTUserid(TUserid node);
    void caseTPassword(TPassword node);
    void caseTNew(TNew node);
    void caseTLocal(TLocal node);
    void caseTOpen(TOpen node);
    void caseTArrayKeyword(TArrayKeyword node);
    void caseTTimeout(TTimeout node);
    void caseTMs(TMs node);
    void caseTSec(TSec node);
    void caseTMin(TMin node);
    void caseTHours(THours node);
    void caseTDays(TDays node);
    void caseTUse(TUse node);
    void caseTWholeNumber(TWholeNumber node);
    void caseTWhitespace(TWhitespace node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseTString2(TString2 node);
    void caseTSlashslashcomment(TSlashslashcomment node);
    void caseTSlashslashslashcomment(TSlashslashslashcomment node);
    void caseTSlashstarcomment(TSlashstarcomment node);
    void caseTSlashslashstarcomment(TSlashslashstarcomment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
