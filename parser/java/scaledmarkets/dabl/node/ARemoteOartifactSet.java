/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.node;

import java.util.*;
import scaledmarkets.dabl.analysis.*;

@SuppressWarnings("nls")
public final class ARemoteOartifactSet extends POartifactSet
{
    private final LinkedList<POfilesetOperation> _ofilesetOperation_ = new LinkedList<POfilesetOperation>();
    private POstringLiteral _project_;
    private POidRef _repositoryId_;

    public ARemoteOartifactSet()
    {
        // Constructor
    }

    public ARemoteOartifactSet(
        @SuppressWarnings("hiding") List<?> _ofilesetOperation_,
        @SuppressWarnings("hiding") POstringLiteral _project_,
        @SuppressWarnings("hiding") POidRef _repositoryId_)
    {
        // Constructor
        setOfilesetOperation(_ofilesetOperation_);

        setProject(_project_);

        setRepositoryId(_repositoryId_);

    }

    @Override
    public Object clone()
    {
        return new ARemoteOartifactSet(
            cloneList(this._ofilesetOperation_),
            cloneNode(this._project_),
            cloneNode(this._repositoryId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARemoteOartifactSet(this);
    }

    public LinkedList<POfilesetOperation> getOfilesetOperation()
    {
        return this._ofilesetOperation_;
    }

    public void setOfilesetOperation(List<?> list)
    {
        for(POfilesetOperation e : this._ofilesetOperation_)
        {
            e.parent(null);
        }
        this._ofilesetOperation_.clear();

        for(Object obj_e : list)
        {
            POfilesetOperation e = (POfilesetOperation) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._ofilesetOperation_.add(e);
        }
    }

    public POstringLiteral getProject()
    {
        return this._project_;
    }

    public void setProject(POstringLiteral node)
    {
        if(this._project_ != null)
        {
            this._project_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._project_ = node;
    }

    public POidRef getRepositoryId()
    {
        return this._repositoryId_;
    }

    public void setRepositoryId(POidRef node)
    {
        if(this._repositoryId_ != null)
        {
            this._repositoryId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repositoryId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ofilesetOperation_)
            + toString(this._project_)
            + toString(this._repositoryId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ofilesetOperation_.remove(child))
        {
            return;
        }

        if(this._project_ == child)
        {
            this._project_ = null;
            return;
        }

        if(this._repositoryId_ == child)
        {
            this._repositoryId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<POfilesetOperation> i = this._ofilesetOperation_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POfilesetOperation) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._project_ == oldChild)
        {
            setProject((POstringLiteral) newChild);
            return;
        }

        if(this._repositoryId_ == oldChild)
        {
            setRepositoryId((POidRef) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
