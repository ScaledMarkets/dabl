/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.analysis;

import java.util.*;
import scaledmarkets.dabl.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPOnamespace().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAOnamespace(AOnamespace node)
    {
        defaultIn(node);
    }

    public void outAOnamespace(AOnamespace node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnamespace(AOnamespace node)
    {
        inAOnamespace(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getPath());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POnamespaceElt> copy = new ArrayList<POnamespaceElt>(node.getOnamespaceElt());
            for(POnamespaceElt e : copy)
            {
                e.apply(this);
            }
        }
        outAOnamespace(node);
    }

    public void inAOidRef(AOidRef node)
    {
        defaultIn(node);
    }

    public void outAOidRef(AOidRef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOidRef(AOidRef node)
    {
        inAOidRef(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAOidRef(node);
    }

    public void inAImportOnamespaceElt(AImportOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outAImportOnamespaceElt(AImportOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAImportOnamespaceElt(AImportOnamespaceElt node)
    {
        inAImportOnamespaceElt(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        outAImportOnamespaceElt(node);
    }

    public void inATypographicOnamespaceElt(ATypographicOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outATypographicOnamespaceElt(ATypographicOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypographicOnamespaceElt(ATypographicOnamespaceElt node)
    {
        inATypographicOnamespaceElt(node);
        if(node.getOtypographicDeclaration() != null)
        {
            node.getOtypographicDeclaration().apply(this);
        }
        outATypographicOnamespaceElt(node);
    }

    public void inAArtifactOnamespaceElt(AArtifactOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outAArtifactOnamespaceElt(AArtifactOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArtifactOnamespaceElt(AArtifactOnamespaceElt node)
    {
        inAArtifactOnamespaceElt(node);
        if(node.getOartifactDeclaration() != null)
        {
            node.getOartifactDeclaration().apply(this);
        }
        outAArtifactOnamespaceElt(node);
    }

    public void inARepoOnamespaceElt(ARepoOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outARepoOnamespaceElt(ARepoOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepoOnamespaceElt(ARepoOnamespaceElt node)
    {
        inARepoOnamespaceElt(node);
        if(node.getOrepoDeclaration() != null)
        {
            node.getOrepoDeclaration().apply(this);
        }
        outARepoOnamespaceElt(node);
    }

    public void inAFilesOnamespaceElt(AFilesOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outAFilesOnamespaceElt(AFilesOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilesOnamespaceElt(AFilesOnamespaceElt node)
    {
        inAFilesOnamespaceElt(node);
        if(node.getOfilesDeclaration() != null)
        {
            node.getOfilesDeclaration().apply(this);
        }
        outAFilesOnamespaceElt(node);
    }

    public void inAFunctionOnamespaceElt(AFunctionOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outAFunctionOnamespaceElt(AFunctionOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionOnamespaceElt(AFunctionOnamespaceElt node)
    {
        inAFunctionOnamespaceElt(node);
        if(node.getOfunctionDeclaration() != null)
        {
            node.getOfunctionDeclaration().apply(this);
        }
        outAFunctionOnamespaceElt(node);
    }

    public void inATaskOnamespaceElt(ATaskOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outATaskOnamespaceElt(ATaskOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATaskOnamespaceElt(ATaskOnamespaceElt node)
    {
        inATaskOnamespaceElt(node);
        if(node.getOtaskDeclaration() != null)
        {
            node.getOtaskDeclaration().apply(this);
        }
        outATaskOnamespaceElt(node);
    }

    public void inATranslationOnamespaceElt(ATranslationOnamespaceElt node)
    {
        defaultIn(node);
    }

    public void outATranslationOnamespaceElt(ATranslationOnamespaceElt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATranslationOnamespaceElt(ATranslationOnamespaceElt node)
    {
        inATranslationOnamespaceElt(node);
        if(node.getOtranslationDeclaration() != null)
        {
            node.getOtranslationDeclaration().apply(this);
        }
        outATranslationOnamespaceElt(node);
    }

    public void inATabDeclOtypographicDeclaration(ATabDeclOtypographicDeclaration node)
    {
        defaultIn(node);
    }

    public void outATabDeclOtypographicDeclaration(ATabDeclOtypographicDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATabDeclOtypographicDeclaration(ATabDeclOtypographicDeclaration node)
    {
        inATabDeclOtypographicDeclaration(node);
        if(node.getWholeNumber() != null)
        {
            node.getWholeNumber().apply(this);
        }
        outATabDeclOtypographicDeclaration(node);
    }

    public void inAOartifactDeclaration(AOartifactDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOartifactDeclaration(AOartifactDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOartifactDeclaration(AOartifactDeclaration node)
    {
        inAOartifactDeclaration(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getMajor() != null)
        {
            node.getMajor().apply(this);
        }
        if(node.getMinor() != null)
        {
            node.getMinor().apply(this);
        }
        {
            List<POcompatibilitySpec> copy = new ArrayList<POcompatibilitySpec>(node.getOcompatibilitySpec());
            for(POcompatibilitySpec e : copy)
            {
                e.apply(this);
            }
        }
        outAOartifactDeclaration(node);
    }

    public void inARangeOrangeSpec(ARangeOrangeSpec node)
    {
        defaultIn(node);
    }

    public void outARangeOrangeSpec(ARangeOrangeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARangeOrangeSpec(ARangeOrangeSpec node)
    {
        inARangeOrangeSpec(node);
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        outARangeOrangeSpec(node);
    }

    public void inAOneOrangeSpec(AOneOrangeSpec node)
    {
        defaultIn(node);
    }

    public void outAOneOrangeSpec(AOneOrangeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOneOrangeSpec(AOneOrangeSpec node)
    {
        inAOneOrangeSpec(node);
        if(node.getWholeNumber() != null)
        {
            node.getWholeNumber().apply(this);
        }
        outAOneOrangeSpec(node);
    }

    public void inAAllOrangeSpec(AAllOrangeSpec node)
    {
        defaultIn(node);
    }

    public void outAAllOrangeSpec(AAllOrangeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAllOrangeSpec(AAllOrangeSpec node)
    {
        inAAllOrangeSpec(node);
        outAAllOrangeSpec(node);
    }

    public void inAAssumeOcompatibilitySpec(AAssumeOcompatibilitySpec node)
    {
        defaultIn(node);
    }

    public void outAAssumeOcompatibilitySpec(AAssumeOcompatibilitySpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssumeOcompatibilitySpec(AAssumeOcompatibilitySpec node)
    {
        inAAssumeOcompatibilitySpec(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POrangeSpec> copy = new ArrayList<POrangeSpec>(node.getOrangeSpec());
            for(POrangeSpec e : copy)
            {
                e.apply(this);
            }
        }
        outAAssumeOcompatibilitySpec(node);
    }

    public void inATestedOcompatibilitySpec(ATestedOcompatibilitySpec node)
    {
        defaultIn(node);
    }

    public void outATestedOcompatibilitySpec(ATestedOcompatibilitySpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATestedOcompatibilitySpec(ATestedOcompatibilitySpec node)
    {
        inATestedOcompatibilitySpec(node);
        {
            List<TId> copy = new ArrayList<TId>(node.getId());
            for(TId e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POrangeSpec> copy = new ArrayList<POrangeSpec>(node.getOrangeSpec());
            for(POrangeSpec e : copy)
            {
                e.apply(this);
            }
        }
        outATestedOcompatibilitySpec(node);
    }

    public void inAOrepoDeclaration(AOrepoDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOrepoDeclaration(AOrepoDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrepoDeclaration(AOrepoDeclaration node)
    {
        inAOrepoDeclaration(node);
        if(node.getOscope() != null)
        {
            node.getOscope().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getScheme() != null)
        {
            node.getScheme().apply(this);
        }
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        if(node.getUserid() != null)
        {
            node.getUserid().apply(this);
        }
        if(node.getPassword() != null)
        {
            node.getPassword().apply(this);
        }
        outAOrepoDeclaration(node);
    }

    public void inASpecifiedOstringValueOpt(ASpecifiedOstringValueOpt node)
    {
        defaultIn(node);
    }

    public void outASpecifiedOstringValueOpt(ASpecifiedOstringValueOpt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecifiedOstringValueOpt(ASpecifiedOstringValueOpt node)
    {
        inASpecifiedOstringValueOpt(node);
        if(node.getOstringLiteral() != null)
        {
            node.getOstringLiteral().apply(this);
        }
        outASpecifiedOstringValueOpt(node);
    }

    public void inAUnspecifiedOstringValueOpt(AUnspecifiedOstringValueOpt node)
    {
        defaultIn(node);
    }

    public void outAUnspecifiedOstringValueOpt(AUnspecifiedOstringValueOpt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnspecifiedOstringValueOpt(AUnspecifiedOstringValueOpt node)
    {
        inAUnspecifiedOstringValueOpt(node);
        outAUnspecifiedOstringValueOpt(node);
    }

    public void inAOfilesDeclaration(AOfilesDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOfilesDeclaration(AOfilesDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOfilesDeclaration(AOfilesDeclaration node)
    {
        inAOfilesDeclaration(node);
        if(node.getOscope() != null)
        {
            node.getOscope().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getOartifactSet() != null)
        {
            node.getOartifactSet().apply(this);
        }
        outAOfilesDeclaration(node);
    }

    public void inALatestCompatibleOfilePreference(ALatestCompatibleOfilePreference node)
    {
        defaultIn(node);
    }

    public void outALatestCompatibleOfilePreference(ALatestCompatibleOfilePreference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALatestCompatibleOfilePreference(ALatestCompatibleOfilePreference node)
    {
        inALatestCompatibleOfilePreference(node);
        outALatestCompatibleOfilePreference(node);
    }

    public void inALatestTestedOfilePreference(ALatestTestedOfilePreference node)
    {
        defaultIn(node);
    }

    public void outALatestTestedOfilePreference(ALatestTestedOfilePreference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALatestTestedOfilePreference(ALatestTestedOfilePreference node)
    {
        inALatestTestedOfilePreference(node);
        outALatestTestedOfilePreference(node);
    }

    public void inAVersionOfilePreference(AVersionOfilePreference node)
    {
        defaultIn(node);
    }

    public void outAVersionOfilePreference(AVersionOfilePreference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVersionOfilePreference(AVersionOfilePreference node)
    {
        inAVersionOfilePreference(node);
        {
            List<POrangeSpec> copy = new ArrayList<POrangeSpec>(node.getOrangeSpec());
            for(POrangeSpec e : copy)
            {
                e.apply(this);
            }
        }
        outAVersionOfilePreference(node);
    }

    public void inANoPreferenceOfilePreference(ANoPreferenceOfilePreference node)
    {
        defaultIn(node);
    }

    public void outANoPreferenceOfilePreference(ANoPreferenceOfilePreference node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoPreferenceOfilePreference(ANoPreferenceOfilePreference node)
    {
        inANoPreferenceOfilePreference(node);
        outANoPreferenceOfilePreference(node);
    }

    public void inAIncludeOfilesetOperation(AIncludeOfilesetOperation node)
    {
        defaultIn(node);
    }

    public void outAIncludeOfilesetOperation(AIncludeOfilesetOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeOfilesetOperation(AIncludeOfilesetOperation node)
    {
        inAIncludeOfilesetOperation(node);
        if(node.getOstringLiteral() != null)
        {
            node.getOstringLiteral().apply(this);
        }
        outAIncludeOfilesetOperation(node);
    }

    public void inAExcludeOfilesetOperation(AExcludeOfilesetOperation node)
    {
        defaultIn(node);
    }

    public void outAExcludeOfilesetOperation(AExcludeOfilesetOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExcludeOfilesetOperation(AExcludeOfilesetOperation node)
    {
        inAExcludeOfilesetOperation(node);
        if(node.getOstringLiteral() != null)
        {
            node.getOstringLiteral().apply(this);
        }
        outAExcludeOfilesetOperation(node);
    }

    public void inAOfunctionDeclaration(AOfunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOfunctionDeclaration(AOfunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOfunctionDeclaration(AOfunctionDeclaration node)
    {
        inAOfunctionDeclaration(node);
        if(node.getOscope() != null)
        {
            node.getOscope().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<POtypeSpec> copy = new ArrayList<POtypeSpec>(node.getOtypeSpec());
            for(POtypeSpec e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTargetLanguage() != null)
        {
            node.getTargetLanguage().apply(this);
        }
        if(node.getTargetName() != null)
        {
            node.getTargetName().apply(this);
        }
        {
            List<POtypeSpec> copy = new ArrayList<POtypeSpec>(node.getReturnType());
            for(POtypeSpec e : copy)
            {
                e.apply(this);
            }
        }
        outAOfunctionDeclaration(node);
    }

    public void inAStringOtypeSpec(AStringOtypeSpec node)
    {
        defaultIn(node);
    }

    public void outAStringOtypeSpec(AStringOtypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringOtypeSpec(AStringOtypeSpec node)
    {
        inAStringOtypeSpec(node);
        outAStringOtypeSpec(node);
    }

    public void inANumericOtypeSpec(ANumericOtypeSpec node)
    {
        defaultIn(node);
    }

    public void outANumericOtypeSpec(ANumericOtypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericOtypeSpec(ANumericOtypeSpec node)
    {
        inANumericOtypeSpec(node);
        outANumericOtypeSpec(node);
    }

    public void inALogicalOtypeSpec(ALogicalOtypeSpec node)
    {
        defaultIn(node);
    }

    public void outALogicalOtypeSpec(ALogicalOtypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicalOtypeSpec(ALogicalOtypeSpec node)
    {
        inALogicalOtypeSpec(node);
        outALogicalOtypeSpec(node);
    }

    public void inAArrayOtypeSpec(AArrayOtypeSpec node)
    {
        defaultIn(node);
    }

    public void outAArrayOtypeSpec(AArrayOtypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayOtypeSpec(AArrayOtypeSpec node)
    {
        inAArrayOtypeSpec(node);
        if(node.getOtypeSpec() != null)
        {
            node.getOtypeSpec().apply(this);
        }
        outAArrayOtypeSpec(node);
    }

    public void inASeparatorOtypeSpec(ASeparatorOtypeSpec node)
    {
        defaultIn(node);
    }

    public void outASeparatorOtypeSpec(ASeparatorOtypeSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeparatorOtypeSpec(ASeparatorOtypeSpec node)
    {
        inASeparatorOtypeSpec(node);
        if(node.getOtypeSpecSeparator() != null)
        {
            node.getOtypeSpecSeparator().apply(this);
        }
        outASeparatorOtypeSpec(node);
    }

    public void inACommaOtypeSpecSeparator(ACommaOtypeSpecSeparator node)
    {
        defaultIn(node);
    }

    public void outACommaOtypeSpecSeparator(ACommaOtypeSpecSeparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACommaOtypeSpecSeparator(ACommaOtypeSpecSeparator node)
    {
        inACommaOtypeSpecSeparator(node);
        outACommaOtypeSpecSeparator(node);
    }

    public void inAPrepositionOtypeSpecSeparator(APrepositionOtypeSpecSeparator node)
    {
        defaultIn(node);
    }

    public void outAPrepositionOtypeSpecSeparator(APrepositionOtypeSpecSeparator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrepositionOtypeSpecSeparator(APrepositionOtypeSpecSeparator node)
    {
        inAPrepositionOtypeSpecSeparator(node);
        if(node.getOpreposition() != null)
        {
            node.getOpreposition().apply(this);
        }
        outAPrepositionOtypeSpecSeparator(node);
    }

    public void inAFromOpreposition(AFromOpreposition node)
    {
        defaultIn(node);
    }

    public void outAFromOpreposition(AFromOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFromOpreposition(AFromOpreposition node)
    {
        inAFromOpreposition(node);
        outAFromOpreposition(node);
    }

    public void inAToOpreposition(AToOpreposition node)
    {
        defaultIn(node);
    }

    public void outAToOpreposition(AToOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAToOpreposition(AToOpreposition node)
    {
        inAToOpreposition(node);
        outAToOpreposition(node);
    }

    public void inAInOpreposition(AInOpreposition node)
    {
        defaultIn(node);
    }

    public void outAInOpreposition(AInOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInOpreposition(AInOpreposition node)
    {
        inAInOpreposition(node);
        outAInOpreposition(node);
    }

    public void inAForOpreposition(AForOpreposition node)
    {
        defaultIn(node);
    }

    public void outAForOpreposition(AForOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForOpreposition(AForOpreposition node)
    {
        inAForOpreposition(node);
        outAForOpreposition(node);
    }

    public void inAWithOpreposition(AWithOpreposition node)
    {
        defaultIn(node);
    }

    public void outAWithOpreposition(AWithOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithOpreposition(AWithOpreposition node)
    {
        inAWithOpreposition(node);
        outAWithOpreposition(node);
    }

    public void inAWhenOpreposition(AWhenOpreposition node)
    {
        defaultIn(node);
    }

    public void outAWhenOpreposition(AWhenOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhenOpreposition(AWhenOpreposition node)
    {
        inAWhenOpreposition(node);
        outAWhenOpreposition(node);
    }

    public void inAOnOpreposition(AOnOpreposition node)
    {
        defaultIn(node);
    }

    public void outAOnOpreposition(AOnOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnOpreposition(AOnOpreposition node)
    {
        inAOnOpreposition(node);
        outAOnOpreposition(node);
    }

    public void inAOfOpreposition(AOfOpreposition node)
    {
        defaultIn(node);
    }

    public void outAOfOpreposition(AOfOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOfOpreposition(AOfOpreposition node)
    {
        inAOfOpreposition(node);
        outAOfOpreposition(node);
    }

    public void inAThanOpreposition(AThanOpreposition node)
    {
        defaultIn(node);
    }

    public void outAThanOpreposition(AThanOpreposition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThanOpreposition(AThanOpreposition node)
    {
        inAThanOpreposition(node);
        outAThanOpreposition(node);
    }

    public void inAOtaskDeclaration(AOtaskDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOtaskDeclaration(AOtaskDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtaskDeclaration(AOtaskDeclaration node)
    {
        inAOtaskDeclaration(node);
        if(node.getOscope() != null)
        {
            node.getOscope().apply(this);
        }
        if(node.getOopen() != null)
        {
            node.getOopen().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        {
            List<POstringLiteral> copy = new ArrayList<POstringLiteral>(node.getUseClause());
            for(POstringLiteral e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POexpr> copy = new ArrayList<POexpr>(node.getWhen());
            for(POexpr e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POnamedArtifactSet> copy = new ArrayList<POnamedArtifactSet>(node.getInput());
            for(POnamedArtifactSet e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POnamedArtifactSet> copy = new ArrayList<POnamedArtifactSet>(node.getOutput());
            for(POnamedArtifactSet e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<POprocStmt> copy = new ArrayList<POprocStmt>(node.getOprocStmt());
            for(POprocStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOtimeout() != null)
        {
            node.getOtimeout().apply(this);
        }
        outAOtaskDeclaration(node);
    }

    public void inASpecifiedOtimeout(ASpecifiedOtimeout node)
    {
        defaultIn(node);
    }

    public void outASpecifiedOtimeout(ASpecifiedOtimeout node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASpecifiedOtimeout(ASpecifiedOtimeout node)
    {
        inASpecifiedOtimeout(node);
        if(node.getOexpr() != null)
        {
            node.getOexpr().apply(this);
        }
        if(node.getOtimeUnit() != null)
        {
            node.getOtimeUnit().apply(this);
        }
        outASpecifiedOtimeout(node);
    }

    public void inAUnspecifiedOtimeout(AUnspecifiedOtimeout node)
    {
        defaultIn(node);
    }

    public void outAUnspecifiedOtimeout(AUnspecifiedOtimeout node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnspecifiedOtimeout(AUnspecifiedOtimeout node)
    {
        inAUnspecifiedOtimeout(node);
        outAUnspecifiedOtimeout(node);
    }

    public void inAMsOtimeUnit(AMsOtimeUnit node)
    {
        defaultIn(node);
    }

    public void outAMsOtimeUnit(AMsOtimeUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMsOtimeUnit(AMsOtimeUnit node)
    {
        inAMsOtimeUnit(node);
        outAMsOtimeUnit(node);
    }

    public void inASecOtimeUnit(ASecOtimeUnit node)
    {
        defaultIn(node);
    }

    public void outASecOtimeUnit(ASecOtimeUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecOtimeUnit(ASecOtimeUnit node)
    {
        inASecOtimeUnit(node);
        outASecOtimeUnit(node);
    }

    public void inAMinOtimeUnit(AMinOtimeUnit node)
    {
        defaultIn(node);
    }

    public void outAMinOtimeUnit(AMinOtimeUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinOtimeUnit(AMinOtimeUnit node)
    {
        inAMinOtimeUnit(node);
        outAMinOtimeUnit(node);
    }

    public void inAHoursOtimeUnit(AHoursOtimeUnit node)
    {
        defaultIn(node);
    }

    public void outAHoursOtimeUnit(AHoursOtimeUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHoursOtimeUnit(AHoursOtimeUnit node)
    {
        inAHoursOtimeUnit(node);
        outAHoursOtimeUnit(node);
    }

    public void inADaysOtimeUnit(ADaysOtimeUnit node)
    {
        defaultIn(node);
    }

    public void outADaysOtimeUnit(ADaysOtimeUnit node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADaysOtimeUnit(ADaysOtimeUnit node)
    {
        inADaysOtimeUnit(node);
        outADaysOtimeUnit(node);
    }

    public void inAPublicOscope(APublicOscope node)
    {
        defaultIn(node);
    }

    public void outAPublicOscope(APublicOscope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPublicOscope(APublicOscope node)
    {
        inAPublicOscope(node);
        outAPublicOscope(node);
    }

    public void inAPrivateOscope(APrivateOscope node)
    {
        defaultIn(node);
    }

    public void outAPrivateOscope(APrivateOscope node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrivateOscope(APrivateOscope node)
    {
        inAPrivateOscope(node);
        outAPrivateOscope(node);
    }

    public void inAOpenOopen(AOpenOopen node)
    {
        defaultIn(node);
    }

    public void outAOpenOopen(AOpenOopen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenOopen(AOpenOopen node)
    {
        inAOpenOopen(node);
        outAOpenOopen(node);
    }

    public void inAClosedOopen(AClosedOopen node)
    {
        defaultIn(node);
    }

    public void outAClosedOopen(AClosedOopen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClosedOopen(AClosedOopen node)
    {
        inAClosedOopen(node);
        outAClosedOopen(node);
    }

    public void inANamedOnamedArtifactSet(ANamedOnamedArtifactSet node)
    {
        defaultIn(node);
    }

    public void outANamedOnamedArtifactSet(ANamedOnamedArtifactSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANamedOnamedArtifactSet(ANamedOnamedArtifactSet node)
    {
        inANamedOnamedArtifactSet(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getOartifactSpec() != null)
        {
            node.getOartifactSpec().apply(this);
        }
        outANamedOnamedArtifactSet(node);
    }

    public void inAAnonymousOnamedArtifactSet(AAnonymousOnamedArtifactSet node)
    {
        defaultIn(node);
    }

    public void outAAnonymousOnamedArtifactSet(AAnonymousOnamedArtifactSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnonymousOnamedArtifactSet(AAnonymousOnamedArtifactSet node)
    {
        inAAnonymousOnamedArtifactSet(node);
        if(node.getOartifactSpec() != null)
        {
            node.getOartifactSpec().apply(this);
        }
        outAAnonymousOnamedArtifactSet(node);
    }

    public void inAInlineOartifactSpec(AInlineOartifactSpec node)
    {
        defaultIn(node);
    }

    public void outAInlineOartifactSpec(AInlineOartifactSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInlineOartifactSpec(AInlineOartifactSpec node)
    {
        inAInlineOartifactSpec(node);
        if(node.getOartifactSet() != null)
        {
            node.getOartifactSet().apply(this);
        }
        outAInlineOartifactSpec(node);
    }

    public void inAFilesRefOartifactSpec(AFilesRefOartifactSpec node)
    {
        defaultIn(node);
    }

    public void outAFilesRefOartifactSpec(AFilesRefOartifactSpec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilesRefOartifactSpec(AFilesRefOartifactSpec node)
    {
        inAFilesRefOartifactSpec(node);
        if(node.getOidRef() != null)
        {
            node.getOidRef().apply(this);
        }
        outAFilesRefOartifactSpec(node);
    }

    public void inARemoteOartifactSet(ARemoteOartifactSet node)
    {
        defaultIn(node);
    }

    public void outARemoteOartifactSet(ARemoteOartifactSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARemoteOartifactSet(ARemoteOartifactSet node)
    {
        inARemoteOartifactSet(node);
        {
            List<POfilesetOperation> copy = new ArrayList<POfilesetOperation>(node.getOfilesetOperation());
            for(POfilesetOperation e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getProject() != null)
        {
            node.getProject().apply(this);
        }
        if(node.getRepositoryId() != null)
        {
            node.getRepositoryId().apply(this);
        }
        outARemoteOartifactSet(node);
    }

    public void inALocalOartifactSet(ALocalOartifactSet node)
    {
        defaultIn(node);
    }

    public void outALocalOartifactSet(ALocalOartifactSet node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalOartifactSet(ALocalOartifactSet node)
    {
        inALocalOartifactSet(node);
        {
            List<POfilesetOperation> copy = new ArrayList<POfilesetOperation>(node.getOfilesetOperation());
            for(POfilesetOperation e : copy)
            {
                e.apply(this);
            }
        }
        outALocalOartifactSet(node);
    }

    public void inAFuncCallOprocStmt(AFuncCallOprocStmt node)
    {
        defaultIn(node);
    }

    public void outAFuncCallOprocStmt(AFuncCallOprocStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallOprocStmt(AFuncCallOprocStmt node)
    {
        inAFuncCallOprocStmt(node);
        if(node.getOidRef() != null)
        {
            node.getOidRef().apply(this);
        }
        {
            List<POexpr> copy = new ArrayList<POexpr>(node.getOexpr());
            for(POexpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getOtargetOpt() != null)
        {
            node.getOtargetOpt().apply(this);
        }
        outAFuncCallOprocStmt(node);
    }

    public void inAIfErrorOprocStmt(AIfErrorOprocStmt node)
    {
        defaultIn(node);
    }

    public void outAIfErrorOprocStmt(AIfErrorOprocStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfErrorOprocStmt(AIfErrorOprocStmt node)
    {
        inAIfErrorOprocStmt(node);
        {
            List<POprocStmt> copy = new ArrayList<POprocStmt>(node.getOprocStmt());
            for(POprocStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAIfErrorOprocStmt(node);
    }

    public void inATargetOtargetOpt(ATargetOtargetOpt node)
    {
        defaultIn(node);
    }

    public void outATargetOtargetOpt(ATargetOtargetOpt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATargetOtargetOpt(ATargetOtargetOpt node)
    {
        inATargetOtargetOpt(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATargetOtargetOpt(node);
    }

    public void inANoTargetOtargetOpt(ANoTargetOtargetOpt node)
    {
        defaultIn(node);
    }

    public void outANoTargetOtargetOpt(ANoTargetOtargetOpt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoTargetOtargetOpt(ANoTargetOtargetOpt node)
    {
        inANoTargetOtargetOpt(node);
        outANoTargetOtargetOpt(node);
    }

    public void inAOtranslationDeclaration(AOtranslationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOtranslationDeclaration(AOtranslationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtranslationDeclaration(AOtranslationDeclaration node)
    {
        inAOtranslationDeclaration(node);
        if(node.getOs() != null)
        {
            node.getOs().apply(this);
        }
        {
            List<POtranslationStmt> copy = new ArrayList<POtranslationStmt>(node.getOtranslationStmt());
            for(POtranslationStmt e : copy)
            {
                e.apply(this);
            }
        }
        outAOtranslationDeclaration(node);
    }

    public void inAFilenameOtranslationStmt(AFilenameOtranslationStmt node)
    {
        defaultIn(node);
    }

    public void outAFilenameOtranslationStmt(AFilenameOtranslationStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFilenameOtranslationStmt(AFilenameOtranslationStmt node)
    {
        inAFilenameOtranslationStmt(node);
        if(node.getFromString() != null)
        {
            node.getFromString().apply(this);
        }
        if(node.getToString() != null)
        {
            node.getToString().apply(this);
        }
        outAFilenameOtranslationStmt(node);
    }

    public void inASucceededOsuccessExpr(ASucceededOsuccessExpr node)
    {
        defaultIn(node);
    }

    public void outASucceededOsuccessExpr(ASucceededOsuccessExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASucceededOsuccessExpr(ASucceededOsuccessExpr node)
    {
        inASucceededOsuccessExpr(node);
        if(node.getOidRef() != null)
        {
            node.getOidRef().apply(this);
        }
        outASucceededOsuccessExpr(node);
    }

    public void inAFailedOsuccessExpr(AFailedOsuccessExpr node)
    {
        defaultIn(node);
    }

    public void outAFailedOsuccessExpr(AFailedOsuccessExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFailedOsuccessExpr(AFailedOsuccessExpr node)
    {
        inAFailedOsuccessExpr(node);
        if(node.getOidRef() != null)
        {
            node.getOidRef().apply(this);
        }
        outAFailedOsuccessExpr(node);
    }

    public void inANewerThanOageExpr(ANewerThanOageExpr node)
    {
        defaultIn(node);
    }

    public void outANewerThanOageExpr(ANewerThanOageExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewerThanOageExpr(ANewerThanOageExpr node)
    {
        inANewerThanOageExpr(node);
        if(node.getNewerId() != null)
        {
            node.getNewerId().apply(this);
        }
        if(node.getOlderId() != null)
        {
            node.getOlderId().apply(this);
        }
        outANewerThanOageExpr(node);
    }

    public void inAOlderThanOageExpr(AOlderThanOageExpr node)
    {
        defaultIn(node);
    }

    public void outAOlderThanOageExpr(AOlderThanOageExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOlderThanOageExpr(AOlderThanOageExpr node)
    {
        inAOlderThanOageExpr(node);
        if(node.getOlderId() != null)
        {
            node.getOlderId().apply(this);
        }
        if(node.getNewerId() != null)
        {
            node.getNewerId().apply(this);
        }
        outAOlderThanOageExpr(node);
    }

    public void inANegationOunaryOp(ANegationOunaryOp node)
    {
        defaultIn(node);
    }

    public void outANegationOunaryOp(ANegationOunaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegationOunaryOp(ANegationOunaryOp node)
    {
        inANegationOunaryOp(node);
        outANegationOunaryOp(node);
    }

    public void inAPlusObinaryOp(APlusObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAPlusObinaryOp(APlusObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusObinaryOp(APlusObinaryOp node)
    {
        inAPlusObinaryOp(node);
        outAPlusObinaryOp(node);
    }

    public void inAMinusObinaryOp(AMinusObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMinusObinaryOp(AMinusObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusObinaryOp(AMinusObinaryOp node)
    {
        inAMinusObinaryOp(node);
        outAMinusObinaryOp(node);
    }

    public void inAMultiplyObinaryOp(AMultiplyObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAMultiplyObinaryOp(AMultiplyObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplyObinaryOp(AMultiplyObinaryOp node)
    {
        inAMultiplyObinaryOp(node);
        outAMultiplyObinaryOp(node);
    }

    public void inADivideObinaryOp(ADivideObinaryOp node)
    {
        defaultIn(node);
    }

    public void outADivideObinaryOp(ADivideObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideObinaryOp(ADivideObinaryOp node)
    {
        inADivideObinaryOp(node);
        outADivideObinaryOp(node);
    }

    public void inAAndObinaryOp(AAndObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAAndObinaryOp(AAndObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndObinaryOp(AAndObinaryOp node)
    {
        inAAndObinaryOp(node);
        outAAndObinaryOp(node);
    }

    public void inAOrObinaryOp(AOrObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAOrObinaryOp(AOrObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrObinaryOp(AOrObinaryOp node)
    {
        inAOrObinaryOp(node);
        outAOrObinaryOp(node);
    }

    public void inAGtObinaryOp(AGtObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAGtObinaryOp(AGtObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtObinaryOp(AGtObinaryOp node)
    {
        inAGtObinaryOp(node);
        outAGtObinaryOp(node);
    }

    public void inALtObinaryOp(ALtObinaryOp node)
    {
        defaultIn(node);
    }

    public void outALtObinaryOp(ALtObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtObinaryOp(ALtObinaryOp node)
    {
        inALtObinaryOp(node);
        outALtObinaryOp(node);
    }

    public void inAGeObinaryOp(AGeObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAGeObinaryOp(AGeObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeObinaryOp(AGeObinaryOp node)
    {
        inAGeObinaryOp(node);
        outAGeObinaryOp(node);
    }

    public void inALeObinaryOp(ALeObinaryOp node)
    {
        defaultIn(node);
    }

    public void outALeObinaryOp(ALeObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeObinaryOp(ALeObinaryOp node)
    {
        inALeObinaryOp(node);
        outALeObinaryOp(node);
    }

    public void inAEqObinaryOp(AEqObinaryOp node)
    {
        defaultIn(node);
    }

    public void outAEqObinaryOp(AEqObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqObinaryOp(AEqObinaryOp node)
    {
        inAEqObinaryOp(node);
        outAEqObinaryOp(node);
    }

    public void inANeObinaryOp(ANeObinaryOp node)
    {
        defaultIn(node);
    }

    public void outANeObinaryOp(ANeObinaryOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeObinaryOp(ANeObinaryOp node)
    {
        inANeObinaryOp(node);
        outANeObinaryOp(node);
    }

    public void inALiteralOexpr(ALiteralOexpr node)
    {
        defaultIn(node);
    }

    public void outALiteralOexpr(ALiteralOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralOexpr(ALiteralOexpr node)
    {
        inALiteralOexpr(node);
        if(node.getOliteral() != null)
        {
            node.getOliteral().apply(this);
        }
        outALiteralOexpr(node);
    }

    public void inAVariableOexpr(AVariableOexpr node)
    {
        defaultIn(node);
    }

    public void outAVariableOexpr(AVariableOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableOexpr(AVariableOexpr node)
    {
        inAVariableOexpr(node);
        if(node.getOvariable() != null)
        {
            node.getOvariable().apply(this);
        }
        outAVariableOexpr(node);
    }

    public void inAUnaryOexpr(AUnaryOexpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryOexpr(AUnaryOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryOexpr(AUnaryOexpr node)
    {
        inAUnaryOexpr(node);
        if(node.getOunaryOp() != null)
        {
            node.getOunaryOp().apply(this);
        }
        if(node.getOexpr() != null)
        {
            node.getOexpr().apply(this);
        }
        outAUnaryOexpr(node);
    }

    public void inABinaryOexpr(ABinaryOexpr node)
    {
        defaultIn(node);
    }

    public void outABinaryOexpr(ABinaryOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABinaryOexpr(ABinaryOexpr node)
    {
        inABinaryOexpr(node);
        if(node.getOperand1() != null)
        {
            node.getOperand1().apply(this);
        }
        if(node.getObinaryOp() != null)
        {
            node.getObinaryOp().apply(this);
        }
        if(node.getOperand2() != null)
        {
            node.getOperand2().apply(this);
        }
        outABinaryOexpr(node);
    }

    public void inASuccessOexpr(ASuccessOexpr node)
    {
        defaultIn(node);
    }

    public void outASuccessOexpr(ASuccessOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuccessOexpr(ASuccessOexpr node)
    {
        inASuccessOexpr(node);
        if(node.getOsuccessExpr() != null)
        {
            node.getOsuccessExpr().apply(this);
        }
        outASuccessOexpr(node);
    }

    public void inAAgeOexpr(AAgeOexpr node)
    {
        defaultIn(node);
    }

    public void outAAgeOexpr(AAgeOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAgeOexpr(AAgeOexpr node)
    {
        inAAgeOexpr(node);
        if(node.getOageExpr() != null)
        {
            node.getOageExpr().apply(this);
        }
        outAAgeOexpr(node);
    }

    public void inAArrayEltOexpr(AArrayEltOexpr node)
    {
        defaultIn(node);
    }

    public void outAArrayEltOexpr(AArrayEltOexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayEltOexpr(AArrayEltOexpr node)
    {
        inAArrayEltOexpr(node);
        if(node.getOexpr() != null)
        {
            node.getOexpr().apply(this);
        }
        outAArrayEltOexpr(node);
    }

    public void inALogicOliteral(ALogicOliteral node)
    {
        defaultIn(node);
    }

    public void outALogicOliteral(ALogicOliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicOliteral(ALogicOliteral node)
    {
        inALogicOliteral(node);
        if(node.getOlogicLiteral() != null)
        {
            node.getOlogicLiteral().apply(this);
        }
        outALogicOliteral(node);
    }

    public void inAStringOliteral(AStringOliteral node)
    {
        defaultIn(node);
    }

    public void outAStringOliteral(AStringOliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringOliteral(AStringOliteral node)
    {
        inAStringOliteral(node);
        if(node.getOstringLiteral() != null)
        {
            node.getOstringLiteral().apply(this);
        }
        outAStringOliteral(node);
    }

    public void inANumericOliteral(ANumericOliteral node)
    {
        defaultIn(node);
    }

    public void outANumericOliteral(ANumericOliteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericOliteral(ANumericOliteral node)
    {
        inANumericOliteral(node);
        if(node.getOnumericLiteral() != null)
        {
            node.getOnumericLiteral().apply(this);
        }
        outANumericOliteral(node);
    }

    public void inAOvariable(AOvariable node)
    {
        defaultIn(node);
    }

    public void outAOvariable(AOvariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOvariable(AOvariable node)
    {
        inAOvariable(node);
        if(node.getOidRef() != null)
        {
            node.getOidRef().apply(this);
        }
        outAOvariable(node);
    }

    public void inATrueOlogicLiteral(ATrueOlogicLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueOlogicLiteral(ATrueOlogicLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueOlogicLiteral(ATrueOlogicLiteral node)
    {
        inATrueOlogicLiteral(node);
        outATrueOlogicLiteral(node);
    }

    public void inAFalseOlogicLiteral(AFalseOlogicLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseOlogicLiteral(AFalseOlogicLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseOlogicLiteral(AFalseOlogicLiteral node)
    {
        inAFalseOlogicLiteral(node);
        outAFalseOlogicLiteral(node);
    }

    public void inAStringOstringLiteral(AStringOstringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringOstringLiteral(AStringOstringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringOstringLiteral(AStringOstringLiteral node)
    {
        inAStringOstringLiteral(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringOstringLiteral(node);
    }

    public void inAString2OstringLiteral(AString2OstringLiteral node)
    {
        defaultIn(node);
    }

    public void outAString2OstringLiteral(AString2OstringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAString2OstringLiteral(AString2OstringLiteral node)
    {
        inAString2OstringLiteral(node);
        if(node.getString2() != null)
        {
            node.getString2().apply(this);
        }
        outAString2OstringLiteral(node);
    }

    public void inAStaticStringExprOstringLiteral(AStaticStringExprOstringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStaticStringExprOstringLiteral(AStaticStringExprOstringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStaticStringExprOstringLiteral(AStaticStringExprOstringLiteral node)
    {
        inAStaticStringExprOstringLiteral(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAStaticStringExprOstringLiteral(node);
    }

    public void inAIntOnumericLiteral(AIntOnumericLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntOnumericLiteral(AIntOnumericLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntOnumericLiteral(AIntOnumericLiteral node)
    {
        inAIntOnumericLiteral(node);
        if(node.getOsign() != null)
        {
            node.getOsign().apply(this);
        }
        if(node.getWholeNumber() != null)
        {
            node.getWholeNumber().apply(this);
        }
        outAIntOnumericLiteral(node);
    }

    public void inAPatternOnumericLiteral(APatternOnumericLiteral node)
    {
        defaultIn(node);
    }

    public void outAPatternOnumericLiteral(APatternOnumericLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatternOnumericLiteral(APatternOnumericLiteral node)
    {
        inAPatternOnumericLiteral(node);
        if(node.getOsign() != null)
        {
            node.getOsign().apply(this);
        }
        if(node.getMagnitude() != null)
        {
            node.getMagnitude().apply(this);
        }
        {
            List<POnumSlot> copy = new ArrayList<POnumSlot>(node.getMantissa());
            for(POnumSlot e : copy)
            {
                e.apply(this);
            }
        }
        outAPatternOnumericLiteral(node);
    }

    public void inANumOnumSlot(ANumOnumSlot node)
    {
        defaultIn(node);
    }

    public void outANumOnumSlot(ANumOnumSlot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumOnumSlot(ANumOnumSlot node)
    {
        inANumOnumSlot(node);
        if(node.getWholeNumber() != null)
        {
            node.getWholeNumber().apply(this);
        }
        outANumOnumSlot(node);
    }

    public void inAWildcardOnumSlot(AWildcardOnumSlot node)
    {
        defaultIn(node);
    }

    public void outAWildcardOnumSlot(AWildcardOnumSlot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWildcardOnumSlot(AWildcardOnumSlot node)
    {
        inAWildcardOnumSlot(node);
        outAWildcardOnumSlot(node);
    }

    public void inAPositiveOsign(APositiveOsign node)
    {
        defaultIn(node);
    }

    public void outAPositiveOsign(APositiveOsign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPositiveOsign(APositiveOsign node)
    {
        inAPositiveOsign(node);
        outAPositiveOsign(node);
    }

    public void inANegativeOsign(ANegativeOsign node)
    {
        defaultIn(node);
    }

    public void outANegativeOsign(ANegativeOsign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativeOsign(ANegativeOsign node)
    {
        inANegativeOsign(node);
        outANegativeOsign(node);
    }
}
