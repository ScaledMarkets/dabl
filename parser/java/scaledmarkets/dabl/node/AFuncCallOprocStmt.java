/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.node;

import java.util.*;
import scaledmarkets.dabl.analysis.*;

@SuppressWarnings("nls")
public final class AFuncCallOprocStmt extends POprocStmt
{
    private POidRef _oidRef_;
    private final LinkedList<POexpr> _oexpr_ = new LinkedList<POexpr>();
    private POtargetOpt _otargetOpt_;

    public AFuncCallOprocStmt()
    {
        // Constructor
    }

    public AFuncCallOprocStmt(
        @SuppressWarnings("hiding") POidRef _oidRef_,
        @SuppressWarnings("hiding") List<?> _oexpr_,
        @SuppressWarnings("hiding") POtargetOpt _otargetOpt_)
    {
        // Constructor
        setOidRef(_oidRef_);

        setOexpr(_oexpr_);

        setOtargetOpt(_otargetOpt_);

    }

    @Override
    public Object clone()
    {
        return new AFuncCallOprocStmt(
            cloneNode(this._oidRef_),
            cloneList(this._oexpr_),
            cloneNode(this._otargetOpt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFuncCallOprocStmt(this);
    }

    public POidRef getOidRef()
    {
        return this._oidRef_;
    }

    public void setOidRef(POidRef node)
    {
        if(this._oidRef_ != null)
        {
            this._oidRef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oidRef_ = node;
    }

    public LinkedList<POexpr> getOexpr()
    {
        return this._oexpr_;
    }

    public void setOexpr(List<?> list)
    {
        for(POexpr e : this._oexpr_)
        {
            e.parent(null);
        }
        this._oexpr_.clear();

        for(Object obj_e : list)
        {
            POexpr e = (POexpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._oexpr_.add(e);
        }
    }

    public POtargetOpt getOtargetOpt()
    {
        return this._otargetOpt_;
    }

    public void setOtargetOpt(POtargetOpt node)
    {
        if(this._otargetOpt_ != null)
        {
            this._otargetOpt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._otargetOpt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._oidRef_)
            + toString(this._oexpr_)
            + toString(this._otargetOpt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._oidRef_ == child)
        {
            this._oidRef_ = null;
            return;
        }

        if(this._oexpr_.remove(child))
        {
            return;
        }

        if(this._otargetOpt_ == child)
        {
            this._otargetOpt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._oidRef_ == oldChild)
        {
            setOidRef((POidRef) newChild);
            return;
        }

        for(ListIterator<POexpr> i = this._oexpr_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POexpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._otargetOpt_ == oldChild)
        {
            setOtargetOpt((POtargetOpt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
