/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.node;

import java.util.*;
import scaledmarkets.dabl.analysis.*;

@SuppressWarnings("nls")
public final class AOtaskDeclaration extends POtaskDeclaration
{
    private POscope _oscope_;
    private POopen _oopen_;
    private TId _name_;
    private final LinkedList<POstringLiteral> _useClause_ = new LinkedList<POstringLiteral>();
    private final LinkedList<POexpr> _when_ = new LinkedList<POexpr>();
    private final LinkedList<POnamedArtifactSet> _input_ = new LinkedList<POnamedArtifactSet>();
    private final LinkedList<POnamedArtifactSet> _output_ = new LinkedList<POnamedArtifactSet>();
    private final LinkedList<POprocStmt> _oprocStmt_ = new LinkedList<POprocStmt>();
    private POtimeout _otimeout_;

    public AOtaskDeclaration()
    {
        // Constructor
    }

    public AOtaskDeclaration(
        @SuppressWarnings("hiding") POscope _oscope_,
        @SuppressWarnings("hiding") POopen _oopen_,
        @SuppressWarnings("hiding") TId _name_,
        @SuppressWarnings("hiding") List<?> _useClause_,
        @SuppressWarnings("hiding") List<?> _when_,
        @SuppressWarnings("hiding") List<?> _input_,
        @SuppressWarnings("hiding") List<?> _output_,
        @SuppressWarnings("hiding") List<?> _oprocStmt_,
        @SuppressWarnings("hiding") POtimeout _otimeout_)
    {
        // Constructor
        setOscope(_oscope_);

        setOopen(_oopen_);

        setName(_name_);

        setUseClause(_useClause_);

        setWhen(_when_);

        setInput(_input_);

        setOutput(_output_);

        setOprocStmt(_oprocStmt_);

        setOtimeout(_otimeout_);

    }

    @Override
    public Object clone()
    {
        return new AOtaskDeclaration(
            cloneNode(this._oscope_),
            cloneNode(this._oopen_),
            cloneNode(this._name_),
            cloneList(this._useClause_),
            cloneList(this._when_),
            cloneList(this._input_),
            cloneList(this._output_),
            cloneList(this._oprocStmt_),
            cloneNode(this._otimeout_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOtaskDeclaration(this);
    }

    public POscope getOscope()
    {
        return this._oscope_;
    }

    public void setOscope(POscope node)
    {
        if(this._oscope_ != null)
        {
            this._oscope_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oscope_ = node;
    }

    public POopen getOopen()
    {
        return this._oopen_;
    }

    public void setOopen(POopen node)
    {
        if(this._oopen_ != null)
        {
            this._oopen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oopen_ = node;
    }

    public TId getName()
    {
        return this._name_;
    }

    public void setName(TId node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public LinkedList<POstringLiteral> getUseClause()
    {
        return this._useClause_;
    }

    public void setUseClause(List<?> list)
    {
        for(POstringLiteral e : this._useClause_)
        {
            e.parent(null);
        }
        this._useClause_.clear();

        for(Object obj_e : list)
        {
            POstringLiteral e = (POstringLiteral) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._useClause_.add(e);
        }
    }

    public LinkedList<POexpr> getWhen()
    {
        return this._when_;
    }

    public void setWhen(List<?> list)
    {
        for(POexpr e : this._when_)
        {
            e.parent(null);
        }
        this._when_.clear();

        for(Object obj_e : list)
        {
            POexpr e = (POexpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._when_.add(e);
        }
    }

    public LinkedList<POnamedArtifactSet> getInput()
    {
        return this._input_;
    }

    public void setInput(List<?> list)
    {
        for(POnamedArtifactSet e : this._input_)
        {
            e.parent(null);
        }
        this._input_.clear();

        for(Object obj_e : list)
        {
            POnamedArtifactSet e = (POnamedArtifactSet) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._input_.add(e);
        }
    }

    public LinkedList<POnamedArtifactSet> getOutput()
    {
        return this._output_;
    }

    public void setOutput(List<?> list)
    {
        for(POnamedArtifactSet e : this._output_)
        {
            e.parent(null);
        }
        this._output_.clear();

        for(Object obj_e : list)
        {
            POnamedArtifactSet e = (POnamedArtifactSet) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._output_.add(e);
        }
    }

    public LinkedList<POprocStmt> getOprocStmt()
    {
        return this._oprocStmt_;
    }

    public void setOprocStmt(List<?> list)
    {
        for(POprocStmt e : this._oprocStmt_)
        {
            e.parent(null);
        }
        this._oprocStmt_.clear();

        for(Object obj_e : list)
        {
            POprocStmt e = (POprocStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._oprocStmt_.add(e);
        }
    }

    public POtimeout getOtimeout()
    {
        return this._otimeout_;
    }

    public void setOtimeout(POtimeout node)
    {
        if(this._otimeout_ != null)
        {
            this._otimeout_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._otimeout_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._oscope_)
            + toString(this._oopen_)
            + toString(this._name_)
            + toString(this._useClause_)
            + toString(this._when_)
            + toString(this._input_)
            + toString(this._output_)
            + toString(this._oprocStmt_)
            + toString(this._otimeout_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._oscope_ == child)
        {
            this._oscope_ = null;
            return;
        }

        if(this._oopen_ == child)
        {
            this._oopen_ = null;
            return;
        }

        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._useClause_.remove(child))
        {
            return;
        }

        if(this._when_.remove(child))
        {
            return;
        }

        if(this._input_.remove(child))
        {
            return;
        }

        if(this._output_.remove(child))
        {
            return;
        }

        if(this._oprocStmt_.remove(child))
        {
            return;
        }

        if(this._otimeout_ == child)
        {
            this._otimeout_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._oscope_ == oldChild)
        {
            setOscope((POscope) newChild);
            return;
        }

        if(this._oopen_ == oldChild)
        {
            setOopen((POopen) newChild);
            return;
        }

        if(this._name_ == oldChild)
        {
            setName((TId) newChild);
            return;
        }

        for(ListIterator<POstringLiteral> i = this._useClause_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POstringLiteral) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<POexpr> i = this._when_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POexpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<POnamedArtifactSet> i = this._input_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POnamedArtifactSet) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<POnamedArtifactSet> i = this._output_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POnamedArtifactSet) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<POprocStmt> i = this._oprocStmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((POprocStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._otimeout_ == oldChild)
        {
            setOtimeout((POtimeout) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
