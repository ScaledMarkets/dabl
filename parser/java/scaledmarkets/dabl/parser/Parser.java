/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.parser;

import scaledmarkets.dabl.lexer.*;
import scaledmarkets.dabl.node.*;
import scaledmarkets.dabl.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        POnamespace node1 = (POnamespace) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce ANamespaceDeclSpecification */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ANamespaceDecl */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AMultipleSpecEltSeqOpt */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce ANoneSpecEltSeqOpt */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AMultipleSpecEltSeq */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AOneSpecEltSeq */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AImportDeclSpecElt */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce ATypographicDeclSpecElt */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AArtifactDeclSpecElt */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce ATaskDeclSpecElt */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce ARepoDeclSpecElt */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AFilesDeclSpecElt */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AFunctionDeclSpecElt */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce ATranslationDeclSpecElt */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce ATypographicDecl */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AImportDecl */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce ATabDecl */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AArtifactDecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list);
            }
            break;
            case 18: /* reduce AWholeNumberExpr */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AMultipleArtifactStmts */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AOneArtifactStmts */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list);
            }
            break;
            case 21: /* reduce AAssumeStmtArtifactStmt */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce ATestedStmtArtifactStmt */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce AAssumeStmt */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ATestedStmt */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce APublicScopeDecl */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list);
            }
            break;
            case 26: /* reduce AUnspecifiedScopeDecl */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce AOpenOpenDecl */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list);
            }
            break;
            case 28: /* reduce AUnspecifiedOpenDecl */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce ATaskDecl */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list);
            }
            break;
            case 30: /* reduce AUseUseClauseOpt */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list);
            }
            break;
            case 31: /* reduce ANoneUseClauseOpt */
            {
                ArrayList<Object> list = new31();
                push(goTo(17), list);
            }
            break;
            case 32: /* reduce AUseClause */
            {
                ArrayList<Object> list = new32();
                push(goTo(18), list);
            }
            break;
            case 33: /* reduce AWhenWhenClauseOpt */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list);
            }
            break;
            case 34: /* reduce ANoneWhenClauseOpt */
            {
                ArrayList<Object> list = new34();
                push(goTo(19), list);
            }
            break;
            case 35: /* reduce AWhenClause */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list);
            }
            break;
            case 36: /* reduce ASpecifiedTimeoutOpt */
            {
                ArrayList<Object> list = new36();
                push(goTo(21), list);
            }
            break;
            case 37: /* reduce AUnspecifiedTimeoutOpt */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list);
            }
            break;
            case 38: /* reduce AMsTimeUnit */
            {
                ArrayList<Object> list = new38();
                push(goTo(22), list);
            }
            break;
            case 39: /* reduce ASecTimeUnit */
            {
                ArrayList<Object> list = new39();
                push(goTo(22), list);
            }
            break;
            case 40: /* reduce AMinTimeUnit */
            {
                ArrayList<Object> list = new40();
                push(goTo(22), list);
            }
            break;
            case 41: /* reduce AHoursTimeUnit */
            {
                ArrayList<Object> list = new41();
                push(goTo(22), list);
            }
            break;
            case 42: /* reduce ADaysTimeUnit */
            {
                ArrayList<Object> list = new42();
                push(goTo(22), list);
            }
            break;
            case 43: /* reduce ASucceededSuccessExpr */
            {
                ArrayList<Object> list = new43();
                push(goTo(23), list);
            }
            break;
            case 44: /* reduce AFailedSuccessExpr */
            {
                ArrayList<Object> list = new44();
                push(goTo(23), list);
            }
            break;
            case 45: /* reduce ANewerThanAgeExpr */
            {
                ArrayList<Object> list = new45();
                push(goTo(24), list);
            }
            break;
            case 46: /* reduce AOlderThanAgeExpr */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list);
            }
            break;
            case 47: /* reduce AMultipleInputSetsOpt */
            {
                ArrayList<Object> list = new47();
                push(goTo(25), list);
            }
            break;
            case 48: /* reduce ANoneInputSetsOpt */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list);
            }
            break;
            case 49: /* reduce AMultipleInputSets */
            {
                ArrayList<Object> list = new49();
                push(goTo(26), list);
            }
            break;
            case 50: /* reduce AOneInputSets */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list);
            }
            break;
            case 51: /* reduce ANamedInputSet */
            {
                ArrayList<Object> list = new51();
                push(goTo(27), list);
            }
            break;
            case 52: /* reduce AAnonymousInputSet */
            {
                ArrayList<Object> list = new52();
                push(goTo(27), list);
            }
            break;
            case 53: /* reduce ARefInputSet */
            {
                ArrayList<Object> list = new53();
                push(goTo(27), list);
            }
            break;
            case 54: /* reduce AMultipleOutputSetsOpt */
            {
                ArrayList<Object> list = new54();
                push(goTo(28), list);
            }
            break;
            case 55: /* reduce ANoneOutputSetsOpt */
            {
                ArrayList<Object> list = new55();
                push(goTo(28), list);
            }
            break;
            case 56: /* reduce AMultipleOutputSets */
            {
                ArrayList<Object> list = new56();
                push(goTo(29), list);
            }
            break;
            case 57: /* reduce AOneOutputSets */
            {
                ArrayList<Object> list = new57();
                push(goTo(29), list);
            }
            break;
            case 58: /* reduce ANamedOutputSet */
            {
                ArrayList<Object> list = new58();
                push(goTo(30), list);
            }
            break;
            case 59: /* reduce AAnonymousOutputSet */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list);
            }
            break;
            case 60: /* reduce ARefOutputSet */
            {
                ArrayList<Object> list = new60();
                push(goTo(30), list);
            }
            break;
            case 61: /* reduce AArtifactSetArtifactSpec */
            {
                ArrayList<Object> list = new61();
                push(goTo(31), list);
            }
            break;
            case 62: /* reduce AFilesRefArtifactSpec */
            {
                ArrayList<Object> list = new62();
                push(goTo(31), list);
            }
            break;
            case 63: /* reduce ARemoteArtifactSet */
            {
                ArrayList<Object> list = new63();
                push(goTo(32), list);
            }
            break;
            case 64: /* reduce ALocalArtifactSet */
            {
                ArrayList<Object> list = new64();
                push(goTo(32), list);
            }
            break;
            case 65: /* reduce AFilesDecl */
            {
                ArrayList<Object> list = new65();
                push(goTo(33), list);
            }
            break;
            case 66: /* reduce ASomeFilesStmtsOpt */
            {
                ArrayList<Object> list = new66();
                push(goTo(34), list);
            }
            break;
            case 67: /* reduce ANoneFilesStmtsOpt */
            {
                ArrayList<Object> list = new67();
                push(goTo(34), list);
            }
            break;
            case 68: /* reduce AMultipleFilesStmts */
            {
                ArrayList<Object> list = new68();
                push(goTo(35), list);
            }
            break;
            case 69: /* reduce AOneFilesStmts */
            {
                ArrayList<Object> list = new69();
                push(goTo(35), list);
            }
            break;
            case 70: /* reduce AIncludeFilesStmt */
            {
                ArrayList<Object> list = new70();
                push(goTo(36), list);
            }
            break;
            case 71: /* reduce AExcludeFilesStmt */
            {
                ArrayList<Object> list = new71();
                push(goTo(36), list);
            }
            break;
            case 72: /* reduce APreferStmt */
            {
                ArrayList<Object> list = new72();
                push(goTo(37), list);
            }
            break;
            case 73: /* reduce AOnePreferStmtOpt */
            {
                ArrayList<Object> list = new73();
                push(goTo(38), list);
            }
            break;
            case 74: /* reduce ANonePreferStmtOpt */
            {
                ArrayList<Object> list = new74();
                push(goTo(38), list);
            }
            break;
            case 75: /* reduce ALatestPreference */
            {
                ArrayList<Object> list = new75();
                push(goTo(39), list);
            }
            break;
            case 76: /* reduce AVersionPreference */
            {
                ArrayList<Object> list = new76();
                push(goTo(39), list);
            }
            break;
            case 77: /* reduce ACompatibleVersionCriteria */
            {
                ArrayList<Object> list = new77();
                push(goTo(40), list);
            }
            break;
            case 78: /* reduce ATestedVersionCriteria */
            {
                ArrayList<Object> list = new78();
                push(goTo(40), list);
            }
            break;
            case 79: /* reduce AMultipleVersionSpec */
            {
                ArrayList<Object> list = new79();
                push(goTo(41), list);
            }
            break;
            case 80: /* reduce AOneVersionSpec */
            {
                ArrayList<Object> list = new80();
                push(goTo(41), list);
            }
            break;
            case 81: /* reduce AMultipleRangeSpec */
            {
                ArrayList<Object> list = new81();
                push(goTo(42), list);
            }
            break;
            case 82: /* reduce AOneRangeSpec */
            {
                ArrayList<Object> list = new82();
                push(goTo(42), list);
            }
            break;
            case 83: /* reduce AAllRangeSpec */
            {
                ArrayList<Object> list = new83();
                push(goTo(42), list);
            }
            break;
            case 84: /* reduce AIncludeStmt */
            {
                ArrayList<Object> list = new84();
                push(goTo(43), list);
            }
            break;
            case 85: /* reduce AExcludeStmt */
            {
                ArrayList<Object> list = new85();
                push(goTo(44), list);
            }
            break;
            case 86: /* reduce AMultipleProceduralStmtsOpt */
            {
                ArrayList<Object> list = new86();
                push(goTo(45), list);
            }
            break;
            case 87: /* reduce ANoneProceduralStmtsOpt */
            {
                ArrayList<Object> list = new87();
                push(goTo(45), list);
            }
            break;
            case 88: /* reduce AMultipleProceduralStmts */
            {
                ArrayList<Object> list = new88();
                push(goTo(46), list);
            }
            break;
            case 89: /* reduce AOneProceduralStmts */
            {
                ArrayList<Object> list = new89();
                push(goTo(46), list);
            }
            break;
            case 90: /* reduce AFuncCallProceduralStmt */
            {
                ArrayList<Object> list = new90();
                push(goTo(47), list);
            }
            break;
            case 91: /* reduce AIfErrorProceduralStmt */
            {
                ArrayList<Object> list = new91();
                push(goTo(47), list);
            }
            break;
            case 92: /* reduce ANoTargetFuncCallStmt */
            {
                ArrayList<Object> list = new92();
                push(goTo(48), list);
            }
            break;
            case 93: /* reduce ATargetFuncCallStmt */
            {
                ArrayList<Object> list = new93();
                push(goTo(48), list);
            }
            break;
            case 94: /* reduce AMultipleArgsArgs */
            {
                ArrayList<Object> list = new94();
                push(goTo(49), list);
            }
            break;
            case 95: /* reduce AOneArgArgs */
            {
                ArrayList<Object> list = new95();
                push(goTo(49), list);
            }
            break;
            case 96: /* reduce ACommaArgSeparator */
            {
                ArrayList<Object> list = new96();
                push(goTo(50), list);
            }
            break;
            case 97: /* reduce APrepArgSeparator */
            {
                ArrayList<Object> list = new97();
                push(goTo(50), list);
            }
            break;
            case 98: /* reduce AArg */
            {
                ArrayList<Object> list = new98();
                push(goTo(51), list);
            }
            break;
            case 99: /* reduce AIfErrorStmt */
            {
                ArrayList<Object> list = new99();
                push(goTo(52), list);
            }
            break;
            case 100: /* reduce ARepoDecl */
            {
                ArrayList<Object> list = new100();
                push(goTo(53), list);
            }
            break;
            case 101: /* reduce ARepoPathSpec */
            {
                ArrayList<Object> list = new101();
                push(goTo(54), list);
            }
            break;
            case 102: /* reduce ASpecifiedTcpSchemeSpecOpt */
            {
                ArrayList<Object> list = new102();
                push(goTo(55), list);
            }
            break;
            case 103: /* reduce AUnspecifiedTcpSchemeSpecOpt */
            {
                ArrayList<Object> list = new103();
                push(goTo(55), list);
            }
            break;
            case 104: /* reduce ATcpSchemeSpec */
            {
                ArrayList<Object> list = new104();
                push(goTo(56), list);
            }
            break;
            case 105: /* reduce ASpecifiedUseridSpecOpt */
            {
                ArrayList<Object> list = new105();
                push(goTo(57), list);
            }
            break;
            case 106: /* reduce AUnspecifiedUseridSpecOpt */
            {
                ArrayList<Object> list = new106();
                push(goTo(57), list);
            }
            break;
            case 107: /* reduce ASpecifiedPasswordSpecOpt */
            {
                ArrayList<Object> list = new107();
                push(goTo(58), list);
            }
            break;
            case 108: /* reduce AUnspecifiedPasswordSpecOpt */
            {
                ArrayList<Object> list = new108();
                push(goTo(58), list);
            }
            break;
            case 109: /* reduce ATranslationDecl */
            {
                ArrayList<Object> list = new109();
                push(goTo(59), list);
            }
            break;
            case 110: /* reduce AMultipleTranslationStmts */
            {
                ArrayList<Object> list = new110();
                push(goTo(60), list);
            }
            break;
            case 111: /* reduce AOneTranslationStmts */
            {
                ArrayList<Object> list = new111();
                push(goTo(60), list);
            }
            break;
            case 112: /* reduce ATranslationStmt */
            {
                ArrayList<Object> list = new112();
                push(goTo(61), list);
            }
            break;
            case 113: /* reduce AFunctionDecl */
            {
                ArrayList<Object> list = new113();
                push(goTo(62), list);
            }
            break;
            case 114: /* reduce AOneTypeSpecOpt */
            {
                ArrayList<Object> list = new114();
                push(goTo(63), list);
            }
            break;
            case 115: /* reduce ANoneTypeSpecOpt */
            {
                ArrayList<Object> list = new115();
                push(goTo(63), list);
            }
            break;
            case 116: /* reduce AMultipleTypeSpecSeq */
            {
                ArrayList<Object> list = new116();
                push(goTo(64), list);
            }
            break;
            case 117: /* reduce AOneTypeSpecSeq */
            {
                ArrayList<Object> list = new117();
                push(goTo(64), list);
            }
            break;
            case 118: /* reduce ACommaTypeSpecSeparator */
            {
                ArrayList<Object> list = new118();
                push(goTo(65), list);
            }
            break;
            case 119: /* reduce APrepositionTypeSpecSeparator */
            {
                ArrayList<Object> list = new119();
                push(goTo(65), list);
            }
            break;
            case 120: /* reduce AFromPreposition */
            {
                ArrayList<Object> list = new120();
                push(goTo(66), list);
            }
            break;
            case 121: /* reduce AToPreposition */
            {
                ArrayList<Object> list = new121();
                push(goTo(66), list);
            }
            break;
            case 122: /* reduce AInPreposition */
            {
                ArrayList<Object> list = new122();
                push(goTo(66), list);
            }
            break;
            case 123: /* reduce AForPreposition */
            {
                ArrayList<Object> list = new123();
                push(goTo(66), list);
            }
            break;
            case 124: /* reduce AWithPreposition */
            {
                ArrayList<Object> list = new124();
                push(goTo(66), list);
            }
            break;
            case 125: /* reduce AWhenPreposition */
            {
                ArrayList<Object> list = new125();
                push(goTo(66), list);
            }
            break;
            case 126: /* reduce AOnPreposition */
            {
                ArrayList<Object> list = new126();
                push(goTo(66), list);
            }
            break;
            case 127: /* reduce AOfPreposition */
            {
                ArrayList<Object> list = new127();
                push(goTo(66), list);
            }
            break;
            case 128: /* reduce AThanPreposition */
            {
                ArrayList<Object> list = new128();
                push(goTo(66), list);
            }
            break;
            case 129: /* reduce AStringTypeSpec */
            {
                ArrayList<Object> list = new129();
                push(goTo(67), list);
            }
            break;
            case 130: /* reduce ANumericTypeSpec */
            {
                ArrayList<Object> list = new130();
                push(goTo(67), list);
            }
            break;
            case 131: /* reduce ALogicalTypeSpec */
            {
                ArrayList<Object> list = new131();
                push(goTo(67), list);
            }
            break;
            case 132: /* reduce AArrayTypeSpec */
            {
                ArrayList<Object> list = new132();
                push(goTo(67), list);
            }
            break;
            case 133: /* reduce AMultiplePath */
            {
                ArrayList<Object> list = new133();
                push(goTo(68), list);
            }
            break;
            case 134: /* reduce AOnePath */
            {
                ArrayList<Object> list = new134();
                push(goTo(68), list);
            }
            break;
            case 135: /* reduce ALogicalExpr */
            {
                ArrayList<Object> list = new135();
                push(goTo(69), list);
            }
            break;
            case 136: /* reduce ANumericExpr */
            {
                ArrayList<Object> list = new136();
                push(goTo(69), list);
            }
            break;
            case 137: /* reduce ALogicalTermExpr */
            {
                ArrayList<Object> list = new137();
                push(goTo(69), list);
            }
            break;
            case 138: /* reduce AValueExpr */
            {
                ArrayList<Object> list = new138();
                push(goTo(69), list);
            }
            break;
            case 139: /* reduce AValueValue */
            {
                ArrayList<Object> list = new139();
                push(goTo(70), list);
            }
            break;
            case 140: /* reduce AVariableValue */
            {
                ArrayList<Object> list = new140();
                push(goTo(70), list);
            }
            break;
            case 141: /* reduce AParenthesesValue */
            {
                ArrayList<Object> list = new141();
                push(goTo(70), list);
            }
            break;
            case 142: /* reduce AArrayEltValue */
            {
                ArrayList<Object> list = new142();
                push(goTo(70), list);
            }
            break;
            case 143: /* reduce AManyLogicalExpr */
            {
                ArrayList<Object> list = new143();
                push(goTo(71), list);
            }
            break;
            case 144: /* reduce AAndLogicalOperator */
            {
                ArrayList<Object> list = new144();
                push(goTo(72), list);
            }
            break;
            case 145: /* reduce AOrLogicalOperator */
            {
                ArrayList<Object> list = new145();
                push(goTo(72), list);
            }
            break;
            case 146: /* reduce AGtLogicalOperator */
            {
                ArrayList<Object> list = new146();
                push(goTo(72), list);
            }
            break;
            case 147: /* reduce ALtLogicalOperator */
            {
                ArrayList<Object> list = new147();
                push(goTo(72), list);
            }
            break;
            case 148: /* reduce AGeLogicalOperator */
            {
                ArrayList<Object> list = new148();
                push(goTo(72), list);
            }
            break;
            case 149: /* reduce ALeLogicalOperator */
            {
                ArrayList<Object> list = new149();
                push(goTo(72), list);
            }
            break;
            case 150: /* reduce AEqLogicalOperator */
            {
                ArrayList<Object> list = new150();
                push(goTo(72), list);
            }
            break;
            case 151: /* reduce ANeLogicalOperator */
            {
                ArrayList<Object> list = new151();
                push(goTo(72), list);
            }
            break;
            case 152: /* reduce ANotLogicalTerm */
            {
                ArrayList<Object> list = new152();
                push(goTo(73), list);
            }
            break;
            case 153: /* reduce ASuccessLogicalTerm */
            {
                ArrayList<Object> list = new153();
                push(goTo(73), list);
            }
            break;
            case 154: /* reduce AAgeLogicalTerm */
            {
                ArrayList<Object> list = new154();
                push(goTo(73), list);
            }
            break;
            case 155: /* reduce ATermLogicalTermOrValue */
            {
                ArrayList<Object> list = new155();
                push(goTo(74), list);
            }
            break;
            case 156: /* reduce AValueLogicalTermOrValue */
            {
                ArrayList<Object> list = new156();
                push(goTo(74), list);
            }
            break;
            case 157: /* reduce ANotExpr */
            {
                ArrayList<Object> list = new157();
                push(goTo(75), list);
            }
            break;
            case 158: /* reduce AManyNumericExpr */
            {
                ArrayList<Object> list = new158();
                push(goTo(76), list);
            }
            break;
            case 159: /* reduce AOneNumericExpr */
            {
                ArrayList<Object> list = new159();
                push(goTo(76), list);
            }
            break;
            case 160: /* reduce AProductProductOrValue */
            {
                ArrayList<Object> list = new160();
                push(goTo(77), list);
            }
            break;
            case 161: /* reduce AValueProductOrValue */
            {
                ArrayList<Object> list = new161();
                push(goTo(77), list);
            }
            break;
            case 162: /* reduce AManyProduct */
            {
                ArrayList<Object> list = new162();
                push(goTo(78), list);
            }
            break;
            case 163: /* reduce AAdditionAddOp */
            {
                ArrayList<Object> list = new163();
                push(goTo(79), list);
            }
            break;
            case 164: /* reduce ASubtractionAddOp */
            {
                ArrayList<Object> list = new164();
                push(goTo(79), list);
            }
            break;
            case 165: /* reduce AMultiplicationMultOp */
            {
                ArrayList<Object> list = new165();
                push(goTo(80), list);
            }
            break;
            case 166: /* reduce ADivisionMultOp */
            {
                ArrayList<Object> list = new166();
                push(goTo(80), list);
            }
            break;
            case 167: /* reduce ALogicLiteral */
            {
                ArrayList<Object> list = new167();
                push(goTo(81), list);
            }
            break;
            case 168: /* reduce AStringLiteral */
            {
                ArrayList<Object> list = new168();
                push(goTo(81), list);
            }
            break;
            case 169: /* reduce ANumericLiteral */
            {
                ArrayList<Object> list = new169();
                push(goTo(81), list);
            }
            break;
            case 170: /* reduce ATrueLogicalLiteral */
            {
                ArrayList<Object> list = new170();
                push(goTo(82), list);
            }
            break;
            case 171: /* reduce AFalseLogicalLiteral */
            {
                ArrayList<Object> list = new171();
                push(goTo(82), list);
            }
            break;
            case 172: /* reduce AIntNumericLiteral */
            {
                ArrayList<Object> list = new172();
                push(goTo(83), list);
            }
            break;
            case 173: /* reduce ANumericPatternNumericLiteral */
            {
                ArrayList<Object> list = new173();
                push(goTo(83), list);
            }
            break;
            case 174: /* reduce APosSignOpt */
            {
                ArrayList<Object> list = new174();
                push(goTo(84), list);
            }
            break;
            case 175: /* reduce ANegSignOpt */
            {
                ArrayList<Object> list = new175();
                push(goTo(84), list);
            }
            break;
            case 176: /* reduce ASignOpt */
            {
                ArrayList<Object> list = new176();
                push(goTo(84), list);
            }
            break;
            case 177: /* reduce AManyFractionSeq */
            {
                ArrayList<Object> list = new177();
                push(goTo(85), list);
            }
            break;
            case 178: /* reduce AOneFractionSeq */
            {
                ArrayList<Object> list = new178();
                push(goTo(85), list);
            }
            break;
            case 179: /* reduce AFraction */
            {
                ArrayList<Object> list = new179();
                push(goTo(86), list);
            }
            break;
            case 180: /* reduce ANumNumSlot */
            {
                ArrayList<Object> list = new180();
                push(goTo(87), list);
            }
            break;
            case 181: /* reduce AWildcardNumSlot */
            {
                ArrayList<Object> list = new181();
                push(goTo(87), list);
            }
            break;
            case 182: /* reduce AStrStringLiteral */
            {
                ArrayList<Object> list = new182();
                push(goTo(88), list);
            }
            break;
            case 183: /* reduce AStrexStringLiteral */
            {
                ArrayList<Object> list = new183();
                push(goTo(88), list);
            }
            break;
            case 184: /* reduce AExprStaticStrExpr */
            {
                ArrayList<Object> list = new184();
                push(goTo(89), list);
            }
            break;
            case 185: /* reduce AStringStringValue */
            {
                ArrayList<Object> list = new185();
                push(goTo(90), list);
            }
            break;
            case 186: /* reduce AString2StringValue */
            {
                ArrayList<Object> list = new186();
                push(goTo(90), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce ANamespaceDeclSpecification */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespace ponamespaceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ponamespaceNode1 = new AOnamespace(listNode3, listNode5);
        }
	nodeList.add(ponamespaceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ANamespaceDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMultipleSpecEltSeqOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ANoneSpecEltSeqOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMultipleSpecEltSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POnamespaceElt ponamespaceeltNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        ponamespaceeltNode1 = (POnamespaceElt)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(ponamespaceeltNode1 != null)
	{
	  listNode3.add(ponamespaceeltNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AOneSpecEltSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POnamespaceElt ponamespaceeltNode1;
        ponamespaceeltNode1 = (POnamespaceElt)nodeArrayList1.get(0);
	if(ponamespaceeltNode1 != null)
	{
	  listNode2.add(ponamespaceeltNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AImportDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        ponamespaceeltNode1 = (POnamespaceElt)nodeArrayList1.get(0);
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ATypographicDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POtypographicDeclaration potypographicdeclarationNode2;
        potypographicdeclarationNode2 = (POtypographicDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new ATypographicOnamespaceElt(potypographicdeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AArtifactDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POartifactDeclaration poartifactdeclarationNode2;
        poartifactdeclarationNode2 = (POartifactDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new AArtifactOnamespaceElt(poartifactdeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ATaskDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POtaskDeclaration potaskdeclarationNode2;
        potaskdeclarationNode2 = (POtaskDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new ATaskOnamespaceElt(potaskdeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ARepoDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POrepoDeclaration porepodeclarationNode2;
        porepodeclarationNode2 = (POrepoDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new ARepoOnamespaceElt(porepodeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFilesDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POfilesDeclaration pofilesdeclarationNode2;
        pofilesdeclarationNode2 = (POfilesDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new AFilesOnamespaceElt(pofilesdeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AFunctionDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POfunctionDeclaration pofunctiondeclarationNode2;
        pofunctiondeclarationNode2 = (POfunctionDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new AFunctionOnamespaceElt(pofunctiondeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATranslationDeclSpecElt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        POtranslationDeclaration potranslationdeclarationNode2;
        potranslationdeclarationNode2 = (POtranslationDeclaration)nodeArrayList1.get(0);

        ponamespaceeltNode1 = new ATranslationOnamespaceElt(potranslationdeclarationNode2);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATypographicDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypographicDeclaration potypographicdeclarationNode1;
        potypographicdeclarationNode1 = (POtypographicDeclaration)nodeArrayList1.get(0);
	nodeList.add(potypographicdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AImportDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamespaceElt ponamespaceeltNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        ponamespaceeltNode1 = new AImportOnamespaceElt(listNode3);
        }
	nodeList.add(ponamespaceeltNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATabDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypographicDeclaration potypographicdeclarationNode1;
        {
            // Block
        TWholeNumber twholenumberNode2;
        twholenumberNode2 = (TWholeNumber)nodeArrayList4.get(0);

        potypographicdeclarationNode1 = new ATabDeclOtypographicDeclaration(twholenumberNode2);
        }
	nodeList.add(potypographicdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArtifactDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POartifactDeclaration poartifactdeclarationNode1;
        {
            // Block
        TId tidNode2;
        TWholeNumber twholenumberNode3;
        TWholeNumber twholenumberNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        twholenumberNode3 = (TWholeNumber)nodeArrayList4.get(0);
        twholenumberNode4 = (TWholeNumber)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList7.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        poartifactdeclarationNode1 = new AOartifactDeclaration(tidNode2, twholenumberNode3, twholenumberNode4, listNode6);
        }
	nodeList.add(poartifactdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AWholeNumberExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        TWholeNumber twholenumberNode1;
        twholenumberNode1 = (TWholeNumber)nodeArrayList1.get(0);
	nodeList.add(twholenumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AMultipleArtifactStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POcompatibilitySpec pocompatibilityspecNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pocompatibilityspecNode1 = (POcompatibilitySpec)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pocompatibilityspecNode1 != null)
	{
	  listNode3.add(pocompatibilityspecNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AOneArtifactStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POcompatibilitySpec pocompatibilityspecNode1;
        pocompatibilityspecNode1 = (POcompatibilitySpec)nodeArrayList1.get(0);
	if(pocompatibilityspecNode1 != null)
	{
	  listNode2.add(pocompatibilityspecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAssumeStmtArtifactStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POcompatibilitySpec pocompatibilityspecNode1;
        pocompatibilityspecNode1 = (POcompatibilitySpec)nodeArrayList1.get(0);
	nodeList.add(pocompatibilityspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ATestedStmtArtifactStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POcompatibilitySpec pocompatibilityspecNode1;
        pocompatibilityspecNode1 = (POcompatibilitySpec)nodeArrayList1.get(0);
	nodeList.add(pocompatibilityspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAssumeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POcompatibilitySpec pocompatibilityspecNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList4.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pocompatibilityspecNode1 = new AAssumeOcompatibilitySpec(listNode3, listNode5);
        }
	nodeList.add(pocompatibilityspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATestedStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POcompatibilitySpec pocompatibilityspecNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pocompatibilityspecNode1 = new ATestedOcompatibilitySpec(listNode3, listNode5);
        }
	nodeList.add(pocompatibilityspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce APublicScopeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POscope poscopeNode1;
        {
            // Block

        poscopeNode1 = new APublicOscope();
        }
	nodeList.add(poscopeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AUnspecifiedScopeDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POscope poscopeNode1;
        {
            // Block

        poscopeNode1 = new APrivateOscope();
        }
	nodeList.add(poscopeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AOpenOpenDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POopen poopenNode1;
        {
            // Block

        poopenNode1 = new AOpenOopen();
        }
	nodeList.add(poopenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AUnspecifiedOpenDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POopen poopenNode1;
        {
            // Block

        poopenNode1 = new AClosedOopen();
        }
	nodeList.add(poopenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATaskDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtaskDeclaration potaskdeclarationNode1;
        {
            // Block
        POscope poscopeNode2;
        POopen poopenNode3;
        TId tidNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        LinkedList<Object> listNode10 = new LinkedList<Object>();
        LinkedList<Object> listNode12 = new LinkedList<Object>();
        LinkedList<Object> listNode14 = new LinkedList<Object>();
        POtimeout potimeoutNode15;
        poscopeNode2 = (POscope)nodeArrayList1.get(0);
        poopenNode3 = (POopen)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        {
            // Block
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        listNode9 = (LinkedList)nodeArrayList7.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }
        {
            // Block
        LinkedList<Object> listNode11 = new LinkedList<Object>();
        listNode11 = (LinkedList)nodeArrayList8.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        {
            // Block
        LinkedList<Object> listNode13 = new LinkedList<Object>();
        listNode13 = (LinkedList)nodeArrayList10.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }
        potimeoutNode15 = (POtimeout)nodeArrayList9.get(0);

        potaskdeclarationNode1 = new AOtaskDeclaration(poscopeNode2, poopenNode3, tidNode4, listNode6, listNode8, listNode10, listNode12, listNode14, potimeoutNode15);
        }
	nodeList.add(potaskdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AUseUseClauseOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POstringLiteral postringliteralNode1;
        postringliteralNode1 = (POstringLiteral)nodeArrayList1.get(0);
	if(postringliteralNode1 != null)
	{
	  listNode2.add(postringliteralNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANoneUseClauseOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AUseClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        postringliteralNode1 = (POstringLiteral)nodeArrayList2.get(0);
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AWhenWhenClauseOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	if(poexprNode1 != null)
	{
	  listNode2.add(poexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANoneWhenClauseOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AWhenClause */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList2.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASpecifiedTimeoutOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtimeout potimeoutNode1;
        {
            // Block
        POexpr poexprNode2;
        POtimeUnit potimeunitNode3;
        poexprNode2 = (POexpr)nodeArrayList2.get(0);
        potimeunitNode3 = (POtimeUnit)nodeArrayList3.get(0);

        potimeoutNode1 = new ASpecifiedOtimeout(poexprNode2, potimeunitNode3);
        }
	nodeList.add(potimeoutNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AUnspecifiedTimeoutOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POtimeout potimeoutNode1;
        {
            // Block

        potimeoutNode1 = new AUnspecifiedOtimeout();
        }
	nodeList.add(potimeoutNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMsTimeUnit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtimeUnit potimeunitNode1;
        {
            // Block

        potimeunitNode1 = new AMsOtimeUnit();
        }
	nodeList.add(potimeunitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASecTimeUnit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtimeUnit potimeunitNode1;
        {
            // Block

        potimeunitNode1 = new ASecOtimeUnit();
        }
	nodeList.add(potimeunitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMinTimeUnit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtimeUnit potimeunitNode1;
        {
            // Block

        potimeunitNode1 = new AMinOtimeUnit();
        }
	nodeList.add(potimeunitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AHoursTimeUnit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtimeUnit potimeunitNode1;
        {
            // Block

        potimeunitNode1 = new AHoursOtimeUnit();
        }
	nodeList.add(potimeunitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADaysTimeUnit */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtimeUnit potimeunitNode1;
        {
            // Block

        potimeunitNode1 = new ADaysOtimeUnit();
        }
	nodeList.add(potimeunitNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASucceededSuccessExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POsuccessExpr posuccessexprNode1;
        {
            // Block
        POidRef poidrefNode2;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }

        posuccessexprNode1 = new ASucceededOsuccessExpr(poidrefNode2);
        }
	nodeList.add(posuccessexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFailedSuccessExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POsuccessExpr posuccessexprNode1;
        {
            // Block
        POidRef poidrefNode2;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }

        posuccessexprNode1 = new AFailedOsuccessExpr(poidrefNode2);
        }
	nodeList.add(posuccessexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANewerThanAgeExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POageExpr poageexprNode1;
        {
            // Block
        POidRef poidrefNode2;
        POidRef poidrefNode5;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        poidrefNode5 = new AOidRef(listNode7);
        }

        poageexprNode1 = new ANewerThanOageExpr(poidrefNode2, poidrefNode5);
        }
	nodeList.add(poageexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOlderThanAgeExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POageExpr poageexprNode1;
        {
            // Block
        POidRef poidrefNode2;
        POidRef poidrefNode5;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        poidrefNode5 = new AOidRef(listNode7);
        }

        poageexprNode1 = new AOlderThanOageExpr(poidrefNode2, poidrefNode5);
        }
	nodeList.add(poageexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultipleInputSetsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ANoneInputSetsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMultipleInputSets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POnamedArtifactSet ponamedartifactsetNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        ponamedartifactsetNode1 = (POnamedArtifactSet)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(ponamedartifactsetNode1 != null)
	{
	  listNode3.add(ponamedartifactsetNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AOneInputSets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POnamedArtifactSet ponamedartifactsetNode1;
        ponamedartifactsetNode1 = (POnamedArtifactSet)nodeArrayList1.get(0);
	if(ponamedartifactsetNode1 != null)
	{
	  listNode2.add(ponamedartifactsetNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANamedInputSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamedArtifactSet ponamedartifactsetNode1;
        {
            // Block
        TId tidNode2;
        POartifactSpec poartifactspecNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        poartifactspecNode3 = (POartifactSpec)nodeArrayList3.get(0);

        ponamedartifactsetNode1 = new ANamedOnamedArtifactSet(tidNode2, poartifactspecNode3);
        }
	nodeList.add(ponamedartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAnonymousInputSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamedArtifactSet ponamedartifactsetNode1;
        {
            // Block
        POartifactSpec poartifactspecNode2;
        poartifactspecNode2 = (POartifactSpec)nodeArrayList2.get(0);

        ponamedartifactsetNode1 = new AAnonymousOnamedArtifactSet(poartifactspecNode2);
        }
	nodeList.add(ponamedartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ARefInputSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamedArtifactSet ponamedartifactsetNode1;
        {
            // Block
        POidRef poidrefNode2;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }

        ponamedartifactsetNode1 = new ARefOnamedArtifactSet(poidrefNode2);
        }
	nodeList.add(ponamedartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultipleOutputSetsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANoneOutputSetsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMultipleOutputSets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POnamedArtifactSet ponamedartifactsetNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        ponamedartifactsetNode1 = (POnamedArtifactSet)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(ponamedartifactsetNode1 != null)
	{
	  listNode3.add(ponamedartifactsetNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AOneOutputSets */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POnamedArtifactSet ponamedartifactsetNode1;
        ponamedartifactsetNode1 = (POnamedArtifactSet)nodeArrayList1.get(0);
	if(ponamedartifactsetNode1 != null)
	{
	  listNode2.add(ponamedartifactsetNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANamedOutputSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamedArtifactSet ponamedartifactsetNode1;
        {
            // Block
        TId tidNode2;
        POartifactSpec poartifactspecNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        poartifactspecNode3 = (POartifactSpec)nodeArrayList3.get(0);

        ponamedartifactsetNode1 = new ANamedOnamedArtifactSet(tidNode2, poartifactspecNode3);
        }
	nodeList.add(ponamedartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAnonymousOutputSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamedArtifactSet ponamedartifactsetNode1;
        {
            // Block
        POartifactSpec poartifactspecNode2;
        poartifactspecNode2 = (POartifactSpec)nodeArrayList2.get(0);

        ponamedartifactsetNode1 = new AAnonymousOnamedArtifactSet(poartifactspecNode2);
        }
	nodeList.add(ponamedartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ARefOutputSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnamedArtifactSet ponamedartifactsetNode1;
        {
            // Block
        POidRef poidrefNode2;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }

        ponamedartifactsetNode1 = new ARefOnamedArtifactSet(poidrefNode2);
        }
	nodeList.add(ponamedartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AArtifactSetArtifactSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POartifactSpec poartifactspecNode1;
        {
            // Block
        POartifactSet poartifactsetNode2;
        poartifactsetNode2 = (POartifactSet)nodeArrayList1.get(0);

        poartifactspecNode1 = new AInlineOartifactSpec(poartifactsetNode2);
        }
	nodeList.add(poartifactspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AFilesRefArtifactSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POartifactSpec poartifactspecNode1;
        {
            // Block
        POidRef poidrefNode2;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }

        poartifactspecNode1 = new AFilesRefOartifactSpec(poidrefNode2);
        }
	nodeList.add(poartifactspecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ARemoteArtifactSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POartifactSet poartifactsetNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        POstringLiteral postringliteralNode4;
        POidRef poidrefNode5;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList6.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        postringliteralNode4 = (POstringLiteral)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        poidrefNode5 = new AOidRef(listNode7);
        }

        poartifactsetNode1 = new ARemoteOartifactSet(listNode3, postringliteralNode4, poidrefNode5);
        }
	nodeList.add(poartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ALocalArtifactSet */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POartifactSet poartifactsetNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        poartifactsetNode1 = new ALocalOartifactSet(listNode3);
        }
	nodeList.add(poartifactsetNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AFilesDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilesDeclaration pofilesdeclarationNode1;
        {
            // Block
        POscope poscopeNode2;
        TId tidNode3;
        POartifactSet poartifactsetNode4;
        poscopeNode2 = (POscope)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        poartifactsetNode4 = (POartifactSet)nodeArrayList4.get(0);

        pofilesdeclarationNode1 = new AOfilesDeclaration(poscopeNode2, tidNode3, poartifactsetNode4);
        }
	nodeList.add(pofilesdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ASomeFilesStmtsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANoneFilesStmtsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AMultipleFilesStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POfilesetOperation pofilesetoperationNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pofilesetoperationNode1 = (POfilesetOperation)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pofilesetoperationNode1 != null)
	{
	  listNode3.add(pofilesetoperationNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AOneFilesStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POfilesetOperation pofilesetoperationNode1;
        pofilesetoperationNode1 = (POfilesetOperation)nodeArrayList1.get(0);
	if(pofilesetoperationNode1 != null)
	{
	  listNode2.add(pofilesetoperationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AIncludeFilesStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilesetOperation pofilesetoperationNode1;
        pofilesetoperationNode1 = (POfilesetOperation)nodeArrayList1.get(0);
	nodeList.add(pofilesetoperationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AExcludeFilesStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilesetOperation pofilesetoperationNode1;
        pofilesetoperationNode1 = (POfilesetOperation)nodeArrayList1.get(0);
	nodeList.add(pofilesetoperationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce APreferStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilePreference pofilepreferenceNode1;
        pofilepreferenceNode1 = (POfilePreference)nodeArrayList2.get(0);
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AOnePreferStmtOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilePreference pofilepreferenceNode1;
        pofilepreferenceNode1 = (POfilePreference)nodeArrayList1.get(0);
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonePreferStmtOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POfilePreference pofilepreferenceNode1;
        {
            // Block

        pofilepreferenceNode1 = new ANoPreferenceOfilePreference();
        }
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ALatestPreference */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilePreference pofilepreferenceNode1;
        pofilepreferenceNode1 = (POfilePreference)nodeArrayList2.get(0);
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AVersionPreference */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilePreference pofilepreferenceNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pofilepreferenceNode1 = new AVersionOfilePreference(listNode3);
        }
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ACompatibleVersionCriteria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilePreference pofilepreferenceNode1;
        {
            // Block

        pofilepreferenceNode1 = new ALatestCompatibleOfilePreference();
        }
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATestedVersionCriteria */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilePreference pofilepreferenceNode1;
        {
            // Block

        pofilepreferenceNode1 = new ALatestTestedOfilePreference();
        }
	nodeList.add(pofilepreferenceNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AMultipleVersionSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POrangeSpec porangespecNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        porangespecNode1 = (POrangeSpec)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(porangespecNode1 != null)
	{
	  listNode3.add(porangespecNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AOneVersionSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POrangeSpec porangespecNode1;
        porangespecNode1 = (POrangeSpec)nodeArrayList1.get(0);
	if(porangespecNode1 != null)
	{
	  listNode2.add(porangespecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AMultipleRangeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrangeSpec porangespecNode1;
        {
            // Block
        TWholeNumber twholenumberNode2;
        TWholeNumber twholenumberNode3;
        twholenumberNode2 = (TWholeNumber)nodeArrayList1.get(0);
        twholenumberNode3 = (TWholeNumber)nodeArrayList3.get(0);

        porangespecNode1 = new ARangeOrangeSpec(twholenumberNode2, twholenumberNode3);
        }
	nodeList.add(porangespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AOneRangeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrangeSpec porangespecNode1;
        {
            // Block
        TWholeNumber twholenumberNode2;
        twholenumberNode2 = (TWholeNumber)nodeArrayList1.get(0);

        porangespecNode1 = new AOneOrangeSpec(twholenumberNode2);
        }
	nodeList.add(porangespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AAllRangeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrangeSpec porangespecNode1;
        {
            // Block

        porangespecNode1 = new AAllOrangeSpec();
        }
	nodeList.add(porangespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce AIncludeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilesetOperation pofilesetoperationNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        postringliteralNode2 = (POstringLiteral)nodeArrayList2.get(0);

        pofilesetoperationNode1 = new AIncludeOfilesetOperation(postringliteralNode2);
        }
	nodeList.add(pofilesetoperationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AExcludeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfilesetOperation pofilesetoperationNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        postringliteralNode2 = (POstringLiteral)nodeArrayList2.get(0);

        pofilesetoperationNode1 = new AExcludeOfilesetOperation(postringliteralNode2);
        }
	nodeList.add(pofilesetoperationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AMultipleProceduralStmtsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANoneProceduralStmtsOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce AMultipleProceduralStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        POprocStmt poprocstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        poprocstmtNode2 = (POprocStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(poprocstmtNode2 != null)
	{
	  listNode3.add(poprocstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AOneProceduralStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POprocStmt poprocstmtNode1;
        poprocstmtNode1 = (POprocStmt)nodeArrayList1.get(0);
	if(poprocstmtNode1 != null)
	{
	  listNode2.add(poprocstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AFuncCallProceduralStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POprocStmt poprocstmtNode1;
        poprocstmtNode1 = (POprocStmt)nodeArrayList1.get(0);
	nodeList.add(poprocstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AIfErrorProceduralStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POprocStmt poprocstmtNode1;
        poprocstmtNode1 = (POprocStmt)nodeArrayList1.get(0);
	nodeList.add(poprocstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ANoTargetFuncCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POprocStmt poprocstmtNode1;
        {
            // Block
        POidRef poidrefNode2;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        POtargetOpt potargetoptNode7;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        TId tidNode8;
        tidNode8 = (TId)nodeArrayList1.get(0);

        potargetoptNode7 = new ATargetOtargetOpt(tidNode8);
        }

        poprocstmtNode1 = new AFuncCallOprocStmt(poidrefNode2, listNode6, potargetoptNode7);
        }
	nodeList.add(poprocstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ATargetFuncCallStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POprocStmt poprocstmtNode1;
        {
            // Block
        POidRef poidrefNode2;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        POtargetOpt potargetoptNode7;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        poidrefNode2 = new AOidRef(listNode4);
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList2.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block

        potargetoptNode7 = new ANoTargetOtargetOpt();
        }

        poprocstmtNode1 = new AFuncCallOprocStmt(poidrefNode2, listNode6, potargetoptNode7);
        }
	nodeList.add(poprocstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce AMultipleArgsArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POexpr poexprNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(poexprNode1 != null)
	{
	  listNode3.add(poexprNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AOneArgArgs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	if(poexprNode1 != null)
	{
	  listNode2.add(poexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ACommaArgSeparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpecSeparator potypespecseparatorNode1;
        {
            // Block

        potypespecseparatorNode1 = new ACommaOtypeSpecSeparator();
        }
	nodeList.add(potypespecseparatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce APrepArgSeparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpecSeparator potypespecseparatorNode1;
        {
            // Block
        POpreposition poprepositionNode2;
        poprepositionNode2 = (POpreposition)nodeArrayList1.get(0);

        potypespecseparatorNode1 = new APrepositionOtypeSpecSeparator(poprepositionNode2);
        }
	nodeList.add(potypespecseparatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce AArg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AIfErrorStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POprocStmt poprocstmtNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        poprocstmtNode1 = new AIfErrorOprocStmt(listNode3);
        }
	nodeList.add(poprocstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ARepoDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POrepoDeclaration porepodeclarationNode1;
        {
            // Block
        POscope poscopeNode2;
        TId tidNode3;
        POstringLiteral postringliteralNode4;
        POstringValueOpt postringvalueoptNode5;
        POstringLiteral postringliteralNode6;
        POstringValueOpt postringvalueoptNode7;
        POstringValueOpt postringvalueoptNode8;
        poscopeNode2 = (POscope)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        postringliteralNode4 = (POstringLiteral)nodeArrayList5.get(0);
        postringvalueoptNode5 = (POstringValueOpt)nodeArrayList6.get(0);
        postringliteralNode6 = (POstringLiteral)nodeArrayList7.get(0);
        postringvalueoptNode7 = (POstringValueOpt)nodeArrayList8.get(0);
        postringvalueoptNode8 = (POstringValueOpt)nodeArrayList9.get(0);

        porepodeclarationNode1 = new AOrepoDeclaration(poscopeNode2, tidNode3, postringliteralNode4, postringvalueoptNode5, postringliteralNode6, postringvalueoptNode7, postringvalueoptNode8);
        }
	nodeList.add(porepodeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ARepoPathSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        postringliteralNode1 = (POstringLiteral)nodeArrayList2.get(0);
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ASpecifiedTcpSchemeSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringValueOpt postringvalueoptNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        postringliteralNode2 = (POstringLiteral)nodeArrayList1.get(0);

        postringvalueoptNode1 = new ASpecifiedOstringValueOpt(postringliteralNode2);
        }
	nodeList.add(postringvalueoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce AUnspecifiedTcpSchemeSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POstringValueOpt postringvalueoptNode1;
        {
            // Block

        postringvalueoptNode1 = new AUnspecifiedOstringValueOpt();
        }
	nodeList.add(postringvalueoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATcpSchemeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        postringliteralNode1 = (POstringLiteral)nodeArrayList2.get(0);
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ASpecifiedUseridSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringValueOpt postringvalueoptNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        postringliteralNode2 = (POstringLiteral)nodeArrayList2.get(0);

        postringvalueoptNode1 = new ASpecifiedOstringValueOpt(postringliteralNode2);
        }
	nodeList.add(postringvalueoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce AUnspecifiedUseridSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POstringValueOpt postringvalueoptNode1;
        {
            // Block

        postringvalueoptNode1 = new AUnspecifiedOstringValueOpt();
        }
	nodeList.add(postringvalueoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ASpecifiedPasswordSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringValueOpt postringvalueoptNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        postringliteralNode2 = (POstringLiteral)nodeArrayList2.get(0);

        postringvalueoptNode1 = new ASpecifiedOstringValueOpt(postringliteralNode2);
        }
	nodeList.add(postringvalueoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce AUnspecifiedPasswordSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POstringValueOpt postringvalueoptNode1;
        {
            // Block

        postringvalueoptNode1 = new AUnspecifiedOstringValueOpt();
        }
	nodeList.add(postringvalueoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ATranslationDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtranslationDeclaration potranslationdeclarationNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        postringliteralNode2 = (POstringLiteral)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        potranslationdeclarationNode1 = new AOtranslationDeclaration(postringliteralNode2, listNode4);
        }
	nodeList.add(potranslationdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce AMultipleTranslationStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POtranslationStmt potranslationstmtNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        potranslationstmtNode1 = (POtranslationStmt)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(potranslationstmtNode1 != null)
	{
	  listNode3.add(potranslationstmtNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce AOneTranslationStmts */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POtranslationStmt potranslationstmtNode1;
        potranslationstmtNode1 = (POtranslationStmt)nodeArrayList1.get(0);
	if(potranslationstmtNode1 != null)
	{
	  listNode2.add(potranslationstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ATranslationStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtranslationStmt potranslationstmtNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        POstringLiteral postringliteralNode3;
        postringliteralNode2 = (POstringLiteral)nodeArrayList3.get(0);
        postringliteralNode3 = (POstringLiteral)nodeArrayList5.get(0);

        potranslationstmtNode1 = new AFilenameOtranslationStmt(postringliteralNode2, postringliteralNode3);
        }
	nodeList.add(potranslationstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce AFunctionDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POfunctionDeclaration pofunctiondeclarationNode1;
        {
            // Block
        POscope poscopeNode2;
        TId tidNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        POstringLiteral postringliteralNode6;
        POstringLiteral postringliteralNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        poscopeNode2 = (POscope)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        postringliteralNode6 = (POstringLiteral)nodeArrayList7.get(0);
        postringliteralNode7 = (POstringLiteral)nodeArrayList9.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList11.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pofunctiondeclarationNode1 = new AOfunctionDeclaration(poscopeNode2, tidNode3, listNode5, postringliteralNode6, postringliteralNode7, listNode9);
        }
	nodeList.add(pofunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new114() /* reduce AOneTypeSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POtypeSpec potypespecNode1;
        potypespecNode1 = (POtypeSpec)nodeArrayList1.get(0);
	if(potypespecNode1 != null)
	{
	  listNode2.add(potypespecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new115() /* reduce ANoneTypeSpecOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new116() /* reduce AMultipleTypeSpecSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        POtypeSpec potypespecNode1;
        POtypeSpec potypespecNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        potypespecNode1 = (POtypeSpec)nodeArrayList1.get(0);
        {
            // Block
        POtypeSpecSeparator potypespecseparatorNode3;
        potypespecseparatorNode3 = (POtypeSpecSeparator)nodeArrayList2.get(0);

        potypespecNode2 = new ASeparatorOtypeSpec(potypespecseparatorNode3);
        }
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(potypespecNode1 != null)
	{
	  listNode5.add(potypespecNode1);
	}
	if(potypespecNode2 != null)
	{
	  listNode5.add(potypespecNode2);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new117() /* reduce AOneTypeSpecSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POtypeSpec potypespecNode1;
        potypespecNode1 = (POtypeSpec)nodeArrayList1.get(0);
	if(potypespecNode1 != null)
	{
	  listNode2.add(potypespecNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new118() /* reduce ACommaTypeSpecSeparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpecSeparator potypespecseparatorNode1;
        {
            // Block

        potypespecseparatorNode1 = new ACommaOtypeSpecSeparator();
        }
	nodeList.add(potypespecseparatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new119() /* reduce APrepositionTypeSpecSeparator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpecSeparator potypespecseparatorNode1;
        {
            // Block
        POpreposition poprepositionNode2;
        poprepositionNode2 = (POpreposition)nodeArrayList1.get(0);

        potypespecseparatorNode1 = new APrepositionOtypeSpecSeparator(poprepositionNode2);
        }
	nodeList.add(potypespecseparatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new120() /* reduce AFromPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AFromOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new121() /* reduce AToPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AToOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new122() /* reduce AInPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AInOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new123() /* reduce AForPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AForOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new124() /* reduce AWithPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AWithOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new125() /* reduce AWhenPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AWhenOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new126() /* reduce AOnPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AOnOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new127() /* reduce AOfPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AOfOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new128() /* reduce AThanPreposition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpreposition poprepositionNode1;
        {
            // Block

        poprepositionNode1 = new AThanOpreposition();
        }
	nodeList.add(poprepositionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new129() /* reduce AStringTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpec potypespecNode1;
        {
            // Block

        potypespecNode1 = new AStringOtypeSpec();
        }
	nodeList.add(potypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new130() /* reduce ANumericTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpec potypespecNode1;
        {
            // Block

        potypespecNode1 = new ANumericOtypeSpec();
        }
	nodeList.add(potypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new131() /* reduce ALogicalTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpec potypespecNode1;
        {
            // Block

        potypespecNode1 = new ALogicalOtypeSpec();
        }
	nodeList.add(potypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new132() /* reduce AArrayTypeSpec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtypeSpec potypespecNode1;
        {
            // Block
        POtypeSpec potypespecNode2;
        potypespecNode2 = (POtypeSpec)nodeArrayList3.get(0);

        potypespecNode1 = new AArrayOtypeSpec(potypespecNode2);
        }
	nodeList.add(potypespecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new133() /* reduce AMultiplePath */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        TId tidNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        tidNode1 = (TId)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidNode1 != null)
	{
	  listNode3.add(tidNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new134() /* reduce AOnePath */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TId tidNode1;
        tidNode1 = (TId)nodeArrayList1.get(0);
	if(tidNode1 != null)
	{
	  listNode2.add(tidNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new135() /* reduce ALogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new136() /* reduce ANumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new137() /* reduce ALogicalTermExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new138() /* reduce AValueExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new139() /* reduce AValueValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POliteral politeralNode2;
        politeralNode2 = (POliteral)nodeArrayList1.get(0);

        poexprNode1 = new ALiteralOexpr(politeralNode2);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new140() /* reduce AVariableValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POvariable povariableNode2;
        {
            // Block
        POidRef poidrefNode3;
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        TId tidNode4;
        tidNode4 = (TId)nodeArrayList1.get(0);
	if(tidNode4 != null)
	{
	  listNode5.add(tidNode4);
	}
        }

        poidrefNode3 = new AOidRef(listNode5);
        }

        povariableNode2 = new AOvariable(poidrefNode3);
        }

        poexprNode1 = new AVariableOexpr(povariableNode2);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new141() /* reduce AParenthesesValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList2.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new142() /* reduce AArrayEltValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POexpr poexprNode2;
        poexprNode2 = (POexpr)nodeArrayList3.get(0);

        poexprNode1 = new AArrayEltOexpr(poexprNode2);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new143() /* reduce AManyLogicalExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POexpr poexprNode2;
        PObinaryOp pobinaryopNode3;
        POexpr poexprNode4;
        poexprNode2 = (POexpr)nodeArrayList1.get(0);
        pobinaryopNode3 = (PObinaryOp)nodeArrayList2.get(0);
        poexprNode4 = (POexpr)nodeArrayList3.get(0);

        poexprNode1 = new ABinaryOexpr(poexprNode2, pobinaryopNode3, poexprNode4);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new144() /* reduce AAndLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AAndObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new145() /* reduce AOrLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AOrObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new146() /* reduce AGtLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AGtObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new147() /* reduce ALtLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new ALtObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new148() /* reduce AGeLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AGeObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new149() /* reduce ALeLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new ALeObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new150() /* reduce AEqLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AEqObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new151() /* reduce ANeLogicalOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new ANeObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new152() /* reduce ANotLogicalTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new153() /* reduce ASuccessLogicalTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POsuccessExpr posuccessexprNode2;
        posuccessexprNode2 = (POsuccessExpr)nodeArrayList1.get(0);

        poexprNode1 = new ASuccessOexpr(posuccessexprNode2);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new154() /* reduce AAgeLogicalTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POageExpr poageexprNode2;
        poageexprNode2 = (POageExpr)nodeArrayList1.get(0);

        poexprNode1 = new AAgeOexpr(poageexprNode2);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new155() /* reduce ATermLogicalTermOrValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new156() /* reduce AValueLogicalTermOrValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new157() /* reduce ANotExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POunaryOp pounaryopNode2;
        POexpr poexprNode3;
        {
            // Block

        pounaryopNode2 = new ANegationOunaryOp();
        }
        poexprNode3 = (POexpr)nodeArrayList2.get(0);

        poexprNode1 = new AUnaryOexpr(pounaryopNode2, poexprNode3);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new158() /* reduce AManyNumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POexpr poexprNode2;
        PObinaryOp pobinaryopNode3;
        POexpr poexprNode4;
        poexprNode2 = (POexpr)nodeArrayList1.get(0);
        pobinaryopNode3 = (PObinaryOp)nodeArrayList2.get(0);
        poexprNode4 = (POexpr)nodeArrayList3.get(0);

        poexprNode1 = new ABinaryOexpr(poexprNode2, pobinaryopNode3, poexprNode4);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new159() /* reduce AOneNumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new160() /* reduce AProductProductOrValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new161() /* reduce AValueProductOrValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        poexprNode1 = (POexpr)nodeArrayList1.get(0);
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new162() /* reduce AManyProduct */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POexpr poexprNode1;
        {
            // Block
        POexpr poexprNode2;
        PObinaryOp pobinaryopNode3;
        POexpr poexprNode4;
        poexprNode2 = (POexpr)nodeArrayList1.get(0);
        pobinaryopNode3 = (PObinaryOp)nodeArrayList2.get(0);
        poexprNode4 = (POexpr)nodeArrayList3.get(0);

        poexprNode1 = new ABinaryOexpr(poexprNode2, pobinaryopNode3, poexprNode4);
        }
	nodeList.add(poexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new163() /* reduce AAdditionAddOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new APlusObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new164() /* reduce ASubtractionAddOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AMinusObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new165() /* reduce AMultiplicationMultOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new AMultiplyObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new166() /* reduce ADivisionMultOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObinaryOp pobinaryopNode1;
        {
            // Block

        pobinaryopNode1 = new ADivideObinaryOp();
        }
	nodeList.add(pobinaryopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new167() /* reduce ALogicLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POliteral politeralNode1;
        {
            // Block
        POlogicLiteral pologicliteralNode2;
        pologicliteralNode2 = (POlogicLiteral)nodeArrayList1.get(0);

        politeralNode1 = new ALogicOliteral(pologicliteralNode2);
        }
	nodeList.add(politeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new168() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POliteral politeralNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        postringliteralNode2 = (POstringLiteral)nodeArrayList1.get(0);

        politeralNode1 = new AStringOliteral(postringliteralNode2);
        }
	nodeList.add(politeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new169() /* reduce ANumericLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POliteral politeralNode1;
        {
            // Block
        POnumericLiteral ponumericliteralNode2;
        ponumericliteralNode2 = (POnumericLiteral)nodeArrayList1.get(0);

        politeralNode1 = new ANumericOliteral(ponumericliteralNode2);
        }
	nodeList.add(politeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new170() /* reduce ATrueLogicalLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POlogicLiteral pologicliteralNode1;
        {
            // Block

        pologicliteralNode1 = new ATrueOlogicLiteral();
        }
	nodeList.add(pologicliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new171() /* reduce AFalseLogicalLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POlogicLiteral pologicliteralNode1;
        {
            // Block

        pologicliteralNode1 = new AFalseOlogicLiteral();
        }
	nodeList.add(pologicliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new172() /* reduce AIntNumericLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnumericLiteral ponumericliteralNode1;
        {
            // Block
        POsign posignNode2;
        TWholeNumber twholenumberNode3;
        posignNode2 = (POsign)nodeArrayList1.get(0);
        twholenumberNode3 = (TWholeNumber)nodeArrayList2.get(0);

        ponumericliteralNode1 = new AIntOnumericLiteral(posignNode2, twholenumberNode3);
        }
	nodeList.add(ponumericliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new173() /* reduce ANumericPatternNumericLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnumericLiteral ponumericliteralNode1;
        {
            // Block
        POsign posignNode2;
        POnumSlot ponumslotNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        posignNode2 = (POsign)nodeArrayList1.get(0);
        ponumslotNode3 = (POnumSlot)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ponumericliteralNode1 = new APatternOnumericLiteral(posignNode2, ponumslotNode3, listNode5);
        }
	nodeList.add(ponumericliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new174() /* reduce APosSignOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POsign posignNode1;
        {
            // Block

        posignNode1 = new APositiveOsign();
        }
	nodeList.add(posignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new175() /* reduce ANegSignOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POsign posignNode1;
        {
            // Block

        posignNode1 = new ANegativeOsign();
        }
	nodeList.add(posignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new176() /* reduce ASignOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        POsign posignNode1;
        {
            // Block

        posignNode1 = new APositiveOsign();
        }
	nodeList.add(posignNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new177() /* reduce AManyFractionSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        POnumSlot ponumslotNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        ponumslotNode1 = (POnumSlot)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(ponumslotNode1 != null)
	{
	  listNode3.add(ponumslotNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new178() /* reduce AOneFractionSeq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        POnumSlot ponumslotNode1;
        ponumslotNode1 = (POnumSlot)nodeArrayList1.get(0);
	if(ponumslotNode1 != null)
	{
	  listNode2.add(ponumslotNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new179() /* reduce AFraction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnumSlot ponumslotNode1;
        ponumslotNode1 = (POnumSlot)nodeArrayList2.get(0);
	nodeList.add(ponumslotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new180() /* reduce ANumNumSlot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnumSlot ponumslotNode1;
        {
            // Block
        TWholeNumber twholenumberNode2;
        twholenumberNode2 = (TWholeNumber)nodeArrayList1.get(0);

        ponumslotNode1 = new ANumOnumSlot(twholenumberNode2);
        }
	nodeList.add(ponumslotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new181() /* reduce AWildcardNumSlot */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POnumSlot ponumslotNode1;
        {
            // Block

        ponumslotNode1 = new AWildcardOnumSlot();
        }
	nodeList.add(ponumslotNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new182() /* reduce AStrStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        postringliteralNode1 = (POstringLiteral)nodeArrayList1.get(0);
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new183() /* reduce AStrexStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        postringliteralNode1 = (POstringLiteral)nodeArrayList1.get(0);
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new184() /* reduce AExprStaticStrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        {
            // Block
        POstringLiteral postringliteralNode2;
        POstringLiteral postringliteralNode3;
        postringliteralNode2 = (POstringLiteral)nodeArrayList1.get(0);
        postringliteralNode3 = (POstringLiteral)nodeArrayList3.get(0);

        postringliteralNode1 = new AStaticStringExprOstringLiteral(postringliteralNode2, postringliteralNode3);
        }
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new185() /* reduce AStringStringValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        postringliteralNode1 = new AStringOstringLiteral(tstringNode2);
        }
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new186() /* reduce AString2StringValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POstringLiteral postringliteralNode1;
        {
            // Block
        TString2 tstring2Node2;
        tstring2Node2 = (TString2)nodeArrayList1.get(0);

        postringliteralNode1 = new AString2OstringLiteral(tstring2Node2);
        }
	nodeList.add(postringliteralNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {36, SHIFT, 1}, },
			{{-1, ERROR, 1}, {96, SHIFT, 4}, },
			{{-1, ERROR, 2}, {99, ACCEPT, -1}, },
			{{-1, REDUCE, 26}, {37, SHIFT, 6}, {38, SHIFT, 7}, {41, SHIFT, 8}, {43, SHIFT, 9}, {48, SHIFT, 10}, },
			{{-1, REDUCE, 134}, {25, SHIFT, 23}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 6}, {96, SHIFT, 4}, },
			{{-1, ERROR, 7}, {39, SHIFT, 25}, },
			{{-1, ERROR, 8}, {96, SHIFT, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 10}, {49, SHIFT, 27}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 26}, {37, SHIFT, 6}, {38, SHIFT, 7}, {41, SHIFT, 8}, {43, SHIFT, 9}, {48, SHIFT, 10}, {99, REDUCE, 5}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 28}, {44, SHIFT, 29}, {47, SHIFT, 30}, {57, SHIFT, 31}, {86, SHIFT, 32}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 23}, {96, SHIFT, 4}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 25}, {28, SHIFT, 35}, },
			{{-1, ERROR, 26}, {14, SHIFT, 36}, },
			{{-1, ERROR, 27}, {30, SHIFT, 37}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 29}, {96, SHIFT, 38}, },
			{{-1, ERROR, 30}, {96, SHIFT, 39}, },
			{{-1, ERROR, 31}, {96, SHIFT, 40}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 33}, {42, SHIFT, 41}, },
			{{-1, REDUCE, 133}, },
			{{-1, ERROR, 35}, {95, SHIFT, 42}, },
			{{-1, ERROR, 36}, {95, SHIFT, 43}, },
			{{-1, ERROR, 37}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 38}, {45, SHIFT, 50}, },
			{{-1, ERROR, 39}, {34, SHIFT, 51}, {84, SHIFT, 52}, },
			{{-1, ERROR, 40}, {72, SHIFT, 54}, {73, SHIFT, 55}, {74, SHIFT, 56}, {87, SHIFT, 57}, },
			{{-1, ERROR, 41}, {96, SHIFT, 60}, },
			{{-1, ERROR, 42}, {40, SHIFT, 61}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 44}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 186}, },
			{{-1, ERROR, 47}, {26, SHIFT, 63}, {50, SHIFT, 64}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 182}, },
			{{-1, ERROR, 50}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 51}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 52}, {85, SHIFT, 69}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 131}, },
			{{-1, ERROR, 57}, {34, SHIFT, 70}, },
			{{-1, ERROR, 58}, {58, SHIFT, 71}, },
			{{-1, REDUCE, 117}, {2, SHIFT, 72}, {27, SHIFT, 73}, {28, SHIFT, 74}, {29, SHIFT, 75}, {30, SHIFT, 76}, {31, SHIFT, 77}, {32, SHIFT, 78}, {33, SHIFT, 79}, {34, SHIFT, 80}, {35, SHIFT, 81}, },
			{{-1, REDUCE, 31}, {94, SHIFT, 84}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 62}, {95, SHIFT, 43}, },
			{{-1, ERROR, 63}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 64}, {51, SHIFT, 89}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 111}, {50, SHIFT, 64}, },
			{{-1, REDUCE, 103}, {26, SHIFT, 63}, {68, SHIFT, 91}, },
			{{-1, ERROR, 68}, {26, SHIFT, 63}, {29, SHIFT, 94}, },
			{{-1, REDUCE, 67}, {78, SHIFT, 95}, {79, SHIFT, 96}, },
			{{-1, ERROR, 70}, {72, SHIFT, 54}, {73, SHIFT, 55}, {74, SHIFT, 56}, {87, SHIFT, 57}, },
			{{-1, ERROR, 71}, {28, SHIFT, 103}, },
			{{-1, REDUCE, 118}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 121}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 128}, },
			{{-1, ERROR, 82}, {72, SHIFT, 54}, {73, SHIFT, 55}, {74, SHIFT, 56}, {87, SHIFT, 57}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 84}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 34}, {32, SHIFT, 106}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 87}, {54, SHIFT, 109}, {56, SHIFT, 110}, },
			{{-1, REDUCE, 184}, },
			{{-1, ERROR, 89}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 110}, },
			{{-1, ERROR, 91}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 92}, {67, SHIFT, 117}, },
			{{-1, REDUCE, 102}, },
			{{-1, ERROR, 94}, {96, SHIFT, 4}, },
			{{-1, ERROR, 95}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 96}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 69}, {2, SHIFT, 122}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 132}, },
			{{-1, ERROR, 103}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 32}, {26, SHIFT, 63}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 48}, {65, SHIFT, 146}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 109}, {55, SHIFT, 150}, },
			{{-1, ERROR, 110}, {31, SHIFT, 151}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 20}, {54, SHIFT, 109}, {56, SHIFT, 110}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 115}, {26, SHIFT, 63}, {28, SHIFT, 153}, },
			{{-1, REDUCE, 104}, {26, SHIFT, 63}, },
			{{-1, ERROR, 117}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 106}, {82, SHIFT, 155}, },
			{{-1, REDUCE, 74}, {52, SHIFT, 157}, },
			{{-1, REDUCE, 84}, {26, SHIFT, 63}, },
			{{-1, REDUCE, 85}, {26, SHIFT, 63}, },
			{{-1, ERROR, 122}, {78, SHIFT, 95}, {79, SHIFT, 96}, },
			{{-1, ERROR, 123}, {26, SHIFT, 63}, {59, SHIFT, 161}, },
			{{-1, REDUCE, 174}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 163}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 170}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 140}, {23, SHIFT, 165}, {25, SHIFT, 23}, {61, REDUCE, 134}, {62, REDUCE, 134}, {63, REDUCE, 134}, {64, REDUCE, 134}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 133}, {61, SHIFT, 166}, {62, SHIFT, 167}, {63, SHIFT, 168}, {64, SHIFT, 169}, },
			{{-1, REDUCE, 35}, {3, SHIFT, 170}, {4, SHIFT, 171}, {7, SHIFT, 172}, {8, SHIFT, 173}, {9, SHIFT, 174}, {10, SHIFT, 175}, {11, SHIFT, 176}, {12, SHIFT, 177}, {76, SHIFT, 178}, {77, SHIFT, 179}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 159}, {5, SHIFT, 182}, {6, SHIFT, 183}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 169}, },
			{{-1, ERROR, 144}, {5, SHIFT, 185}, {95, SHIFT, 186}, },
			{{-1, REDUCE, 168}, {26, SHIFT, 63}, },
			{{-1, ERROR, 146}, {34, SHIFT, 51}, {84, SHIFT, 52}, {94, SHIFT, 188}, {96, SHIFT, 189}, },
			{{-1, REDUCE, 55}, {66, SHIFT, 193}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 50}, {65, SHIFT, 146}, },
			{{-1, ERROR, 150}, {31, SHIFT, 198}, },
			{{-1, ERROR, 151}, {96, SHIFT, 4}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 153}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 101}, {26, SHIFT, 63}, },
			{{-1, ERROR, 155}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 108}, {83, SHIFT, 202}, },
			{{-1, ERROR, 157}, {5, SHIFT, 204}, {53, SHIFT, 205}, {95, SHIFT, 206}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 67}, {78, SHIFT, 95}, {79, SHIFT, 96}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 161}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 162}, {3, SHIFT, 170}, {4, SHIFT, 171}, {7, SHIFT, 172}, {8, SHIFT, 173}, {9, SHIFT, 174}, {10, SHIFT, 175}, {11, SHIFT, 176}, {12, SHIFT, 177}, {20, SHIFT, 212}, {76, SHIFT, 178}, {77, SHIFT, 179}, },
			{{-1, REDUCE, 140}, {23, SHIFT, 165}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 168}, {35, SHIFT, 214}, },
			{{-1, ERROR, 169}, {35, SHIFT, 215}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 164}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 151}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 145}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 163}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 165}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 163}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 181}, },
			{{-1, REDUCE, 172}, {25, REDUCE, 180}, },
			{{-1, ERROR, 187}, {25, SHIFT, 223}, },
			{{-1, ERROR, 188}, {96, SHIFT, 4}, },
			{{-1, REDUCE, 134}, {25, SHIFT, 23}, {34, SHIFT, 51}, {84, SHIFT, 52}, {94, SHIFT, 188}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 193}, {34, SHIFT, 51}, {84, SHIFT, 52}, {94, SHIFT, 188}, {96, SHIFT, 228}, },
			{{-1, REDUCE, 37}, {88, SHIFT, 231}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 57}, {66, SHIFT, 193}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 198}, {96, SHIFT, 4}, },
			{{-1, ERROR, 199}, {14, SHIFT, 235}, },
			{{-1, REDUCE, 112}, {26, SHIFT, 63}, },
			{{-1, REDUCE, 105}, {26, SHIFT, 63}, },
			{{-1, ERROR, 202}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 205}, {55, SHIFT, 237}, {56, SHIFT, 238}, },
			{{-1, REDUCE, 82}, {4, SHIFT, 240}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 80}, {25, SHIFT, 241}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 211}, {26, SHIFT, 63}, {60, SHIFT, 242}, },
			{{-1, REDUCE, 141}, },
			{{-1, ERROR, 213}, {3, SHIFT, 170}, {4, SHIFT, 171}, {7, SHIFT, 172}, {8, SHIFT, 173}, {9, SHIFT, 174}, {10, SHIFT, 175}, {11, SHIFT, 176}, {12, SHIFT, 177}, {24, SHIFT, 243}, {76, SHIFT, 178}, {77, SHIFT, 179}, },
			{{-1, ERROR, 214}, {96, SHIFT, 4}, },
			{{-1, ERROR, 215}, {96, SHIFT, 4}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 143}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 160}, {5, SHIFT, 182}, {6, SHIFT, 183}, },
			{{-1, REDUCE, 162}, },
			{{-1, ERROR, 223}, {5, SHIFT, 185}, {95, SHIFT, 246}, },
			{{-1, REDUCE, 173}, },
			{{-1, REDUCE, 178}, {25, SHIFT, 223}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 134}, {25, SHIFT, 23}, {34, SHIFT, 51}, {84, SHIFT, 52}, {94, SHIFT, 188}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 87}, {69, SHIFT, 252}, {96, SHIFT, 253}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 234}, {14, SHIFT, 260}, },
			{{-1, ERROR, 235}, {5, SHIFT, 204}, {95, SHIFT, 206}, },
			{{-1, REDUCE, 107}, {26, SHIFT, 63}, },
			{{-1, ERROR, 237}, {31, SHIFT, 262}, },
			{{-1, ERROR, 238}, {31, SHIFT, 263}, },
			{{-1, REDUCE, 75}, },
			{{-1, ERROR, 240}, {95, SHIFT, 264}, },
			{{-1, ERROR, 241}, {5, SHIFT, 204}, {95, SHIFT, 206}, },
			{{-1, REDUCE, 115}, {72, SHIFT, 54}, {73, SHIFT, 55}, {74, SHIFT, 56}, {87, SHIFT, 57}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 180}, },
			{{-1, REDUCE, 179}, },
			{{-1, REDUCE, 177}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 250}, {3, SHIFT, 170}, {4, SHIFT, 171}, {7, SHIFT, 172}, {8, SHIFT, 173}, {9, SHIFT, 174}, {10, SHIFT, 175}, {11, SHIFT, 176}, {12, SHIFT, 177}, {76, SHIFT, 178}, {77, SHIFT, 179}, },
			{{-1, REDUCE, 136}, {89, SHIFT, 268}, {90, SHIFT, 269}, {91, SHIFT, 270}, {92, SHIFT, 271}, {93, SHIFT, 272}, },
			{{-1, ERROR, 252}, {71, SHIFT, 274}, },
			{{-1, REDUCE, 134}, {13, SHIFT, 275}, {25, SHIFT, 23}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 86}, {69, SHIFT, 252}, {96, SHIFT, 253}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, ERROR, 260}, {5, SHIFT, 204}, {95, SHIFT, 206}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 114}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 274}, {69, SHIFT, 252}, {96, SHIFT, 253}, },
			{{-1, ERROR, 275}, {96, SHIFT, 4}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 95}, {2, SHIFT, 283}, {27, SHIFT, 73}, {28, SHIFT, 74}, {29, SHIFT, 75}, {30, SHIFT, 76}, {31, SHIFT, 77}, {32, SHIFT, 78}, {33, SHIFT, 79}, {34, SHIFT, 80}, {35, SHIFT, 81}, },
			{{-1, REDUCE, 98}, {3, SHIFT, 170}, {4, SHIFT, 171}, {7, SHIFT, 172}, {8, SHIFT, 173}, {9, SHIFT, 174}, {10, SHIFT, 175}, {11, SHIFT, 176}, {12, SHIFT, 177}, {76, SHIFT, 178}, {77, SHIFT, 179}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 281}, {69, SHIFT, 252}, {70, SHIFT, 286}, {96, SHIFT, 253}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 176}, {3, SHIFT, 124}, {4, SHIFT, 125}, {19, SHIFT, 126}, {75, SHIFT, 127}, {80, SHIFT, 128}, {81, SHIFT, 129}, {96, SHIFT, 130}, {97, SHIFT, 45}, {98, SHIFT, 46}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 286}, {69, SHIFT, 289}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 99}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, -1}, },
			{{-1, 11}, {12, 28}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, 44}, {62, 87}, },
			{{-1, 111}, {112, 152}, },
			{{-1, 112}, },
			{{-1, 113}, },
			{{-1, 114}, },
			{{-1, 17}, },
			{{-1, 33}, },
			{{-1, 18}, },
			{{-1, 85}, },
			{{-1, 86}, },
			{{-1, 107}, },
			{{-1, 108}, },
			{{-1, 232}, },
			{{-1, 273}, },
			{{-1, 131}, },
			{{-1, 132}, },
			{{-1, 147}, },
			{{-1, 148}, {149, 197}, },
			{{-1, 149}, },
			{{-1, 194}, },
			{{-1, 195}, {196, 233}, },
			{{-1, 196}, },
			{{-1, 190}, {189, 227}, {193, 229}, {228, 249}, },
			{{-1, 191}, {39, 53}, },
			{{-1, 19}, },
			{{-1, 97}, {159, 210}, },
			{{-1, 98}, {122, 160}, },
			{{-1, 99}, },
			{{-1, 158}, },
			{{-1, 159}, },
			{{-1, 207}, },
			{{-1, 239}, },
			{{-1, 208}, {235, 261}, {241, 265}, {260, 280}, },
			{{-1, 209}, },
			{{-1, 100}, },
			{{-1, 101}, },
			{{-1, 254}, },
			{{-1, 255}, {274, 281}, },
			{{-1, 256}, {255, 276}, {281, 276}, },
			{{-1, 257}, },
			{{-1, 277}, {282, 287}, {284, 288}, },
			{{-1, 284}, },
			{{-1, 278}, },
			{{-1, 258}, },
			{{-1, 20}, },
			{{-1, 118}, },
			{{-1, 92}, },
			{{-1, 93}, },
			{{-1, 156}, },
			{{-1, 203}, },
			{{-1, 21}, },
			{{-1, 65}, {66, 90}, },
			{{-1, 66}, },
			{{-1, 22}, },
			{{-1, 266}, },
			{{-1, 58}, {82, 104}, },
			{{-1, 82}, },
			{{-1, 83}, {278, 285}, },
			{{-1, 59}, {70, 102}, {242, 267}, },
			{{-1, 133}, {1, 5}, {6, 24}, {23, 34}, {94, 119}, {146, 192}, {151, 199}, {188, 226}, {193, 230}, {198, 234}, {214, 244}, {215, 245}, {232, 259}, {255, 259}, {274, 259}, {275, 282}, {281, 259}, },
			{{-1, 279}, {106, 134}, {126, 162}, {165, 213}, {231, 250}, },
			{{-1, 135}, {127, 164}, {180, 216}, {181, 219}, {184, 222}, },
			{{-1, 136}, },
			{{-1, 180}, },
			{{-1, 137}, {180, 217}, },
			{{-1, 218}, },
			{{-1, 138}, },
			{{-1, 139}, {231, 251}, },
			{{-1, 220}, },
			{{-1, 140}, {181, 221}, },
			{{-1, 181}, },
			{{-1, 184}, },
			{{-1, 141}, },
			{{-1, 142}, },
			{{-1, 143}, },
			{{-1, 144}, },
			{{-1, 224}, {225, 248}, },
			{{-1, 225}, },
			{{-1, 187}, {223, 247}, },
			{{-1, 145}, {37, 47}, {50, 67}, {51, 68}, {84, 105}, {89, 115}, {91, 116}, {95, 120}, {96, 121}, {103, 123}, {117, 154}, {153, 200}, {155, 201}, {161, 211}, {202, 236}, },
			{{-1, 48}, },
			{{-1, 49}, {63, 88}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'namespace'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'open'",
			"expecting: comma char, '+', '-', '*', '>', '<', '>=', '<=', '=', '!=', ':', '(', ')', ']', per char, 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'prefer', 'function', 'succeeded', 'failed', 'newer', 'older', 'inputs', 'outputs', 'if', 'end', 'not', 'and', 'or', 'include', 'exclude', 'true', 'false', 'open', 'timeout', whole number, id, string, string2, EOF",
			"expecting: 'equivalent'",
			"expecting: 'task', 'repo', 'files', 'function', 'open'",
			"expecting: 'translation'",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'open', EOF",
			"expecting: 'to'",
			"expecting: ':'",
			"expecting: 'for'",
			"expecting: 'task'",
			"expecting: comma char, '+', '-', '*', '>', '<', '>=', '<=', '=', '!=', ':', '(', ')', ']', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'prefer', 'function', 'succeeded', 'failed', 'newer', 'older', 'inputs', 'outputs', 'if', 'end', 'not', 'and', 'or', 'include', 'exclude', 'true', 'false', 'open', 'timeout', whole number, id, string, string2, EOF",
			"expecting: whole number",
			"expecting: string, string2",
			"expecting: 'type'",
			"expecting: 'of', 'new'",
			"expecting: 'string', 'numeric', 'logical', 'array'",
			"expecting: 'spaces'",
			"expecting: per char, 'assume', 'tested'",
			"expecting: per char",
			"expecting: comma char, '+', '-', '*', '/', '>', '<', '>=', '<=', '=', '!=', ')', ']', '^', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'translate', 'function', 'method', 'returns', 'inputs', 'outputs', 'path', 'scheme', 'if', 'end', 'and', 'or', 'userid', 'password', 'open', 'timeout', 'ms', 'sec', 'min', 'hours', 'days', id, EOF",
			"expecting: '^', 'translate'",
			"expecting: 'local'",
			"expecting: comma char, 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'binds', 'open', EOF",
			"expecting: 'of'",
			"expecting: 'binds'",
			"expecting: comma char, 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'binds'",
			"expecting: 'when', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'open', 'timeout', 'use', id, EOF",
			"expecting: 'filename'",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'translate', 'function', 'open', EOF",
			"expecting: '^', 'path', 'scheme'",
			"expecting: '^', 'in'",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'include', 'exclude', 'open', 'timeout', id, EOF",
			"expecting: '+', '-', '*', '(', 'string', 'numeric', 'logical', 'not', 'true', 'false', 'array', whole number, id, string, string2",
			"expecting: 'when', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'open', 'timeout', id, EOF",
			"expecting: 'assume', 'tested'",
			"expecting: 'path'",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'open', 'timeout', id, EOF",
			"expecting: comma char, 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'open', 'timeout', id, EOF",
			"expecting: '^', 'when', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'open', 'timeout', id, EOF",
			"expecting: '+', '-', '*', '(', 'not', 'true', 'false', whole number, id, string, string2",
			"expecting: 'compatible'",
			"expecting: 'with'",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'assume', 'tested', 'function', 'open', EOF",
			"expecting: '^', 'to'",
			"expecting: '^', 'path'",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'userid', 'password', 'open', EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'prefer', 'function', 'inputs', 'outputs', 'if', 'include', 'exclude', 'open', 'timeout', id, EOF",
			"expecting: comma char, '^', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'open', 'timeout', id, EOF",
			"expecting: 'include', 'exclude'",
			"expecting: '^', 'method'",
			"expecting: '*', whole number",
			"expecting: '+', '-', '*', '(', 'true', 'false', whole number, id, string, string2",
			"expecting: comma char, '+', '-', '*', '/', '>', '<', '>=', '<=', '=', '!=', ')', ']', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', 'ms', 'sec', 'min', 'hours', 'days', id, EOF",
			"expecting: comma char, '+', '-', '>', '<', '>=', '<=', '=', '!=', ')', '[', ']', per char, 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'succeeded', 'failed', 'newer', 'older', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', id, EOF",
			"expecting: comma char, '+', '-', '>', '<', '>=', '<=', '=', '!=', ')', ']', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', id, EOF",
			"expecting: 'succeeded', 'failed', 'newer', 'older'",
			"expecting: '+', '-', '>', '<', '>=', '<=', '=', '!=', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'and', 'or', 'open', 'timeout', id, EOF",
			"expecting: comma char, '+', '-', '*', '/', '>', '<', '>=', '<=', '=', '!=', ')', ']', '^', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', 'ms', 'sec', 'min', 'hours', 'days', id, EOF",
			"expecting: 'of', 'new', 'use', id",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'outputs', 'if', 'open', 'timeout', id, EOF",
			"expecting: '^', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'userid', 'password', 'open', EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'password', 'open', EOF",
			"expecting: '*', 'latest', whole number",
			"expecting: '+', '-', '>', '<', '>=', '<=', '=', '!=', ')', 'and', 'or'",
			"expecting: comma char, '+', '-', '*', '/', '>', '<', '>=', '<=', '=', '!=', ')', '[', ']', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', 'ms', 'sec', 'min', 'hours', 'days', id, EOF",
			"expecting: 'than'",
			"expecting: comma char, '+', '-', '*', '/', '>', '<', '>=', '<=', '=', '!=', ')', ']', per char, 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', 'ms', 'sec', 'min', 'hours', 'days', id, EOF",
			"expecting: per char, 'of', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'new', 'open', 'timeout', 'use', id, EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'if', 'open', 'timeout', id, EOF",
			"expecting: '^', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'translate', 'function', 'open', EOF",
			"expecting: '^', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'password', 'open', EOF",
			"expecting: per char, 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'assume', 'tested', 'function', 'inputs', 'outputs', 'if', 'include', 'exclude', 'open', 'timeout', id, EOF",
			"expecting: 'compatible', 'tested'",
			"expecting: '-', per char, 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'assume', 'tested', 'function', 'inputs', 'outputs', 'if', 'include', 'exclude', 'open', 'timeout', id, EOF",
			"expecting: '^', 'returns'",
			"expecting: '+', '-', '>', '<', '>=', '<=', '=', '!=', ']', 'and', 'or'",
			"expecting: comma char, '+', '-', '>', '<', '>=', '<=', '=', '!=', ')', ']', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'inputs', 'outputs', 'if', 'end', 'and', 'or', 'open', 'timeout', 'ms', 'sec', 'min', 'hours', 'days', id, EOF",
			"expecting: per char, 'of', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'outputs', 'if', 'new', 'open', 'timeout', 'use', id, EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'if', 'open', id, EOF",
			"expecting: '^', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'open', EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'string', 'numeric', 'logical', 'open', 'array', EOF",
			"expecting: '+', '-', '>', '<', '>=', '<=', '=', '!=', 'and', 'or'",
			"expecting: '+', '-', '>', '<', '>=', '<=', '=', '!=', 'and', 'or', 'ms', 'sec', 'min', 'hours', 'days'",
			"expecting: 'error'",
			"expecting: '+', '-', '*', '<-', '(', per char, 'not', 'true', 'false', whole number, id, string, string2",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'if', 'end', 'open', id, EOF",
			"expecting: 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'assume', 'tested', 'function', 'inputs', 'outputs', 'if', 'include', 'exclude', 'open', 'timeout', id, EOF",
			"expecting: 'if', id",
			"expecting: comma char, 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'if', 'end', 'open', id, EOF",
			"expecting: comma char, '+', '-', '>', '<', '>=', '<=', '=', '!=', 'from', 'to', 'in', 'for', 'with', 'when', 'on', 'of', 'than', 'import', 'tab', 'artifact', 'task', 'public', 'repo', 'files', 'shell', 'function', 'if', 'end', 'and', 'or', 'open', id, EOF",
			"expecting: 'if', 'end', id",
			"expecting: 'if'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 1, 5, 1, 6, 7, 2, 8, 8, 8, 8, 8, 6, 8, 8, 8, 8, 8, 1, 8, 9, 10, 11, 2, 1, 1, 1, 12, 12, 13, 14, 14, 15, 16, 17, 18, 1, 19, 20, 21, 22, 22, 23, 22, 22, 15, 15, 24, 8, 25, 25, 25, 26, 27, 28, 29, 8, 14, 15, 30, 8, 31, 32, 33, 34, 18, 9, 18, 35, 35, 35, 35, 35, 35, 35, 35, 35, 18, 18, 15, 36, 36, 37, 22, 15, 8, 15, 38, 38, 1, 15, 15, 39, 39, 40, 40, 40, 25, 15, 27, 41, 42, 39, 39, 43, 44, 8, 45, 45, 45, 46, 47, 15, 48, 49, 50, 50, 51, 52, 53, 53, 42, 54, 55, 55, 56, 57, 57, 58, 59, 57, 57, 57, 57, 57, 55, 55, 55, 55, 53, 60, 61, 62, 62, 39, 44, 1, 8, 15, 63, 15, 64, 65, 34, 34, 39, 15, 66, 67, 57, 42, 57, 57, 68, 68, 54, 54, 42, 42, 42, 42, 42, 42, 42, 42, 42, 54, 54, 54, 54, 69, 69, 21, 1, 70, 39, 39, 39, 61, 71, 71, 62, 62, 1, 10, 72, 73, 15, 8, 74, 75, 76, 34, 34, 74, 39, 77, 55, 78, 1, 1, 57, 57, 57, 79, 79, 55, 55, 53, 55, 69, 39, 39, 80, 62, 62, 42, 81, 71, 10, 53, 82, 44, 44, 34, 14, 53, 83, 55, 57, 57, 69, 69, 55, 62, 84, 85, 86, 87, 8, 81, 88, 88, 88, 42, 53, 45, 34, 34, 74, 89, 8, 8, 81, 81, 81, 81, 81, 81, 90, 1, 88, 88, 91, 92, 45, 93, 42, 42, 42, 42, 94, 88, 88, 88, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
