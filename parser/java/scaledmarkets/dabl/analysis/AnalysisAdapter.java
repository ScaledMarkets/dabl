/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.analysis;

import java.util.*;
import scaledmarkets.dabl.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOnamespace(AOnamespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOidRef(AOidRef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAImportOnamespaceElt(AImportOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypographicOnamespaceElt(ATypographicOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArtifactOnamespaceElt(AArtifactOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepoOnamespaceElt(ARepoOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFilesOnamespaceElt(AFilesOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFunctionOnamespaceElt(AFunctionOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATaskOnamespaceElt(ATaskOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATranslationOnamespaceElt(ATranslationOnamespaceElt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATabDeclOtypographicDeclaration(ATabDeclOtypographicDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOartifactDeclaration(AOartifactDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARangeOrangeSpec(ARangeOrangeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOneOrangeSpec(AOneOrangeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAllOrangeSpec(AAllOrangeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssumeOcompatibilitySpec(AAssumeOcompatibilitySpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATestedOcompatibilitySpec(ATestedOcompatibilitySpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrepoDeclaration(AOrepoDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASpecifiedOstringValueOpt(ASpecifiedOstringValueOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnspecifiedOstringValueOpt(AUnspecifiedOstringValueOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOfilesDeclaration(AOfilesDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALatestCompatibleOfilePreference(ALatestCompatibleOfilePreference node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALatestTestedOfilePreference(ALatestTestedOfilePreference node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVersionOfilePreference(AVersionOfilePreference node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoPreferenceOfilePreference(ANoPreferenceOfilePreference node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncludeOfilesetOperation(AIncludeOfilesetOperation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExcludeOfilesetOperation(AExcludeOfilesetOperation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOfunctionDeclaration(AOfunctionDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringOtypeSpec(AStringOtypeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericOtypeSpec(ANumericOtypeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicalOtypeSpec(ALogicalOtypeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayOtypeSpec(AArrayOtypeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASeparatorOtypeSpec(ASeparatorOtypeSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommaOtypeSpecSeparator(ACommaOtypeSpecSeparator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrepositionOtypeSpecSeparator(APrepositionOtypeSpecSeparator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFromOpreposition(AFromOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAToOpreposition(AToOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInOpreposition(AInOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForOpreposition(AForOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWithOpreposition(AWithOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhenOpreposition(AWhenOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOnOpreposition(AOnOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOfOpreposition(AOfOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThanOpreposition(AThanOpreposition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOtaskDeclaration(AOtaskDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASpecifiedOtimeout(ASpecifiedOtimeout node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnspecifiedOtimeout(AUnspecifiedOtimeout node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMsOtimeUnit(AMsOtimeUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASecOtimeUnit(ASecOtimeUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinOtimeUnit(AMinOtimeUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAHoursOtimeUnit(AHoursOtimeUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADaysOtimeUnit(ADaysOtimeUnit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPublicOscope(APublicOscope node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrivateOscope(APrivateOscope node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpenOopen(AOpenOopen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAClosedOopen(AClosedOopen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANamedOnamedArtifactSet(ANamedOnamedArtifactSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnonymousOnamedArtifactSet(AAnonymousOnamedArtifactSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARefOnamedArtifactSet(ARefOnamedArtifactSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInlineOartifactSpec(AInlineOartifactSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFilesRefOartifactSpec(AFilesRefOartifactSpec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARemoteOartifactSet(ARemoteOartifactSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalOartifactSet(ALocalOartifactSet node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFuncCallOprocStmt(AFuncCallOprocStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfErrorOprocStmt(AIfErrorOprocStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATargetOtargetOpt(ATargetOtargetOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoTargetOtargetOpt(ANoTargetOtargetOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOtranslationDeclaration(AOtranslationDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFilenameOtranslationStmt(AFilenameOtranslationStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASucceededOsuccessExpr(ASucceededOsuccessExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFailedOsuccessExpr(AFailedOsuccessExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANewerThanOageExpr(ANewerThanOageExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOlderThanOageExpr(AOlderThanOageExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegationOunaryOp(ANegationOunaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusObinaryOp(APlusObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusObinaryOp(AMinusObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplyObinaryOp(AMultiplyObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivideObinaryOp(ADivideObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndObinaryOp(AAndObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrObinaryOp(AOrObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGtObinaryOp(AGtObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALtObinaryOp(ALtObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGeObinaryOp(AGeObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALeObinaryOp(ALeObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqObinaryOp(AEqObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANeObinaryOp(ANeObinaryOp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralOexpr(ALiteralOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableOexpr(AVariableOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryOexpr(AUnaryOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinaryOexpr(ABinaryOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuccessOexpr(ASuccessOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAgeOexpr(AAgeOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayEltOexpr(AArrayEltOexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALogicOliteral(ALogicOliteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringOliteral(AStringOliteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumericOliteral(ANumericOliteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOvariable(AOvariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueOlogicLiteral(ATrueOlogicLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseOlogicLiteral(AFalseOlogicLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringOstringLiteral(AStringOstringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAString2OstringLiteral(AString2OstringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStaticStringExprOstringLiteral(AStaticStringExprOstringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntOnumericLiteral(AIntOnumericLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPatternOnumericLiteral(APatternOnumericLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumOnumSlot(ANumOnumSlot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWildcardOnumSlot(AWildcardOnumSlot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPositiveOsign(APositiveOsign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegativeOsign(ANegativeOsign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTabChar(TTabChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNlChar(TNlChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommaChar(TCommaChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDash(TDash node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAsterisk(TAsterisk node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGe(TGe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLe(TLe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNe(TNe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGets(TGets node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDotdot(TDotdot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQmark(TQmark node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDef(TDef node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftParen(TLeftParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightParen(TRightParen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftCur(TLeftCur node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightCur(TRightCur node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftBrack(TLeftBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightBrack(TRightBrack node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPerChar(TPerChar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCaret(TCaret node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFor(TFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWith(TWith node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhen(TWhen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOn(TOn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOf(TOf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThan(TThan node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNamespace(TNamespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTImport(TImport node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTabKeyword(TTabKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquivalent(TEquivalent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSpacesKeyword(TSpacesKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArtifact(TArtifact node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTask(TTask node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRepo(TRepo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTType(TType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGit(TGit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFiles(TFiles node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShell(TShell node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTranslation(TTranslation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTranslate(TTranslate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFilename(TFilename node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrefer(TPrefer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLatest(TLatest node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssume(TAssume node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCompatible(TCompatible node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTested(TTested node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFunction(TFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBinds(TBinds node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMethod(TMethod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReturns(TReturns node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSucceeded(TSucceeded node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFailed(TFailed node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNewer(TNewer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOlder(TOlder node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInputs(TInputs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOutputs(TOutputs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPathKeyword(TPathKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTScheme(TScheme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTError(TError node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringKeyword(TStringKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumericKeyword(TNumericKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLogicalKeyword(TLogicalKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotKeyword(TNotKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAndKeyword(TAndKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOrKeyword(TOrKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInclude(TInclude node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTExclude(TExclude node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrueKeyword(TTrueKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalseKeyword(TFalseKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUserid(TUserid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPassword(TPassword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLocal(TLocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOpen(TOpen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTArrayKeyword(TArrayKeyword node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTimeout(TTimeout node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMs(TMs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSec(TSec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMin(TMin node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTHours(THours node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDays(TDays node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUse(TUse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWholeNumber(TWholeNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhitespace(TWhitespace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString2(TString2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashslashcomment(TSlashslashcomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashslashslashcomment(TSlashslashslashcomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashstarcomment(TSlashstarcomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSlashslashstarcomment(TSlashslashstarcomment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
