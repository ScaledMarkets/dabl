/* This file was generated by SableCC (http://www.sablecc.org/). */

package scaledmarkets.dabl.node;

import scaledmarkets.dabl.analysis.*;

@SuppressWarnings("nls")
public final class AOlderThanOageExpr extends POageExpr
{
    private POidRef _olderId_;
    private POidRef _newerId_;

    public AOlderThanOageExpr()
    {
        // Constructor
    }

    public AOlderThanOageExpr(
        @SuppressWarnings("hiding") POidRef _olderId_,
        @SuppressWarnings("hiding") POidRef _newerId_)
    {
        // Constructor
        setOlderId(_olderId_);

        setNewerId(_newerId_);

    }

    @Override
    public Object clone()
    {
        return new AOlderThanOageExpr(
            cloneNode(this._olderId_),
            cloneNode(this._newerId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOlderThanOageExpr(this);
    }

    public POidRef getOlderId()
    {
        return this._olderId_;
    }

    public void setOlderId(POidRef node)
    {
        if(this._olderId_ != null)
        {
            this._olderId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._olderId_ = node;
    }

    public POidRef getNewerId()
    {
        return this._newerId_;
    }

    public void setNewerId(POidRef node)
    {
        if(this._newerId_ != null)
        {
            this._newerId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newerId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._olderId_)
            + toString(this._newerId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._olderId_ == child)
        {
            this._olderId_ = null;
            return;
        }

        if(this._newerId_ == child)
        {
            this._newerId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._olderId_ == oldChild)
        {
            setOlderId((POidRef) newChild);
            return;
        }

        if(this._newerId_ == oldChild)
        {
            setNewerId((POidRef) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
